{
  "openapi": "3.1.0",
  "info": {
    "title": "Morphik API",
    "version": "0.1.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Basic health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "summary": "Readiness Check",
        "description": "Readiness check that verifies the application is initialized.",
        "operationId": "readiness_check_health_ready_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/ingest/text": {
      "post": {
        "summary": "Ingest Text",
        "description": "Ingest a text document.",
        "operationId": "ingest_text_ingest_text_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ingest/file": {
      "post": {
        "summary": "Ingest File",
        "description": "Ingest a file document.",
        "operationId": "ingest_file_ingest_file_post",
        "parameters": [
          {
            "name": "use_colpali",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Colpali"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ingest_file_ingest_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/chunks": {
      "post": {
        "summary": "Retrieve Chunks",
        "description": "Retrieve relevant chunks.",
        "operationId": "retrieve_chunks_retrieve_chunks_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResult"
                  },
                  "title": "Response Retrieve Chunks Retrieve Chunks Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/docs": {
      "post": {
        "summary": "Retrieve Documents",
        "description": "Retrieve relevant documents.",
        "operationId": "retrieve_documents_retrieve_docs_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentResult"
                  },
                  "title": "Response Retrieve Documents Retrieve Docs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/batch/documents": {
      "post": {
        "summary": "Batch Get Documents",
        "description": "Retrieve multiple documents by their IDs in a single batch operation.",
        "operationId": "batch_get_documents_batch_documents_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Document Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "title": "Response Batch Get Documents Batch Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/batch/chunks": {
      "post": {
        "summary": "Batch Get Chunks",
        "description": "Retrieve specific chunks by their document ID and chunk number in a single batch operation.",
        "operationId": "batch_get_chunks_batch_chunks_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChunkSource"
                },
                "title": "Chunk Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResult"
                  },
                  "title": "Response Batch Get Chunks Batch Chunks Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "summary": "Query Completion",
        "description": "Generate completion using relevant chunks as context.\n\nWhen graph_name is provided, the query will leverage the knowledge graph \nto enhance retrieval by finding relevant entities and their connected documents.",
        "operationId": "query_completion_query_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents": {
      "get": {
        "summary": "List Documents",
        "description": "List accessible documents.",
        "operationId": "list_documents_documents_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10000,
              "title": "Limit"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Filters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "title": "Response List Documents Documents Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}": {
      "get": {
        "summary": "Get Document",
        "description": "Get document by ID.",
        "operationId": "get_document_documents__document_id__get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/filename/{filename}": {
      "get": {
        "summary": "Get Document By Filename",
        "description": "Get document by filename.",
        "operationId": "get_document_by_filename_documents_filename__filename__get",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_text": {
      "post": {
        "summary": "Update Document Text",
        "description": "Update a document with new text content using the specified strategy.\n\nArgs:\n    document_id: ID of the document to update\n    request: Text content and metadata for the update\n    update_strategy: Strategy for updating the document (default: 'add')\n    \nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_text_documents__document_id__update_text_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "update_strategy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "add",
              "title": "Update Strategy"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_file": {
      "post": {
        "summary": "Update Document File",
        "description": "Update a document with content from a file using the specified strategy.\n\nArgs:\n    document_id: ID of the document to update\n    file: File to add to the document\n    metadata: JSON string of metadata to merge with existing metadata\n    rules: JSON string of rules to apply to the content\n    update_strategy: Strategy for updating the document (default: 'add')\n    use_colpali: Whether to use multi-vector embedding\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_file_documents__document_id__update_file_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "use_colpali",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Colpali"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_document_file_documents__document_id__update_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_metadata": {
      "post": {
        "summary": "Update Document Metadata",
        "description": "Update only a document's metadata.\n\nArgs:\n    document_id: ID of the document to update\n    metadata: New metadata to merge with existing metadata\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_metadata_documents__document_id__update_metadata_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/stats": {
      "get": {
        "summary": "Get Usage Stats",
        "description": "Get usage statistics for the authenticated user.",
        "operationId": "get_usage_stats_usage_stats_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "title": "Response Get Usage Stats Usage Stats Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/recent": {
      "get": {
        "summary": "Get Recent Usage",
        "description": "Get recent usage records.",
        "operationId": "get_recent_usage_usage_recent_get",
        "parameters": [
          {
            "name": "operation_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Operation Type"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Since"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Recent Usage Usage Recent Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/create": {
      "post": {
        "summary": "Create Cache",
        "description": "Create a new cache with specified configuration.",
        "operationId": "create_cache_cache_create_post",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "model",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model"
            }
          },
          {
            "name": "gguf_file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Gguf File"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_cache_cache_create_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Cache Cache Create Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}": {
      "get": {
        "summary": "Get Cache",
        "description": "Get cache configuration by name.",
        "operationId": "get_cache_cache__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Cache Cache  Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/update": {
      "post": {
        "summary": "Update Cache",
        "description": "Update cache with new documents matching its filter.",
        "operationId": "update_cache_cache__name__update_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Update Cache Cache  Name  Update Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/add_docs": {
      "post": {
        "summary": "Add Docs To Cache",
        "description": "Add specific documents to the cache.",
        "operationId": "add_docs_to_cache_cache__name__add_docs_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Docs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Add Docs To Cache Cache  Name  Add Docs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/query": {
      "post": {
        "summary": "Query Cache",
        "description": "Query the cache with a prompt.",
        "operationId": "query_cache_cache__name__query_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Query"
            }
          },
          {
            "name": "max_tokens",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tokens"
            }
          },
          {
            "name": "temperature",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/create": {
      "post": {
        "summary": "Create Graph",
        "description": "Create a graph from documents.\n\nThis endpoint extracts entities and relationships from documents\nmatching the specified filters or document IDs and creates a graph.\n\nArgs:\n    request: CreateGraphRequest containing:\n        - name: Name of the graph to create\n        - filters: Optional metadata filters to determine which documents to include\n        - documents: Optional list of specific document IDs to include\n    auth: Authentication context\n\nReturns:\n    Graph: The created graph object",
        "operationId": "create_graph_graph_create_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGraphRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}": {
      "get": {
        "summary": "Get Graph",
        "description": "Get a graph by name.\n\nThis endpoint retrieves a graph by its name if the user has access to it.\n\nArgs:\n    name: Name of the graph to retrieve\n    auth: Authentication context\n\nReturns:\n    Graph: The requested graph object",
        "operationId": "get_graph_graph__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graphs": {
      "get": {
        "summary": "List Graphs",
        "description": "List all graphs the user has access to.\n\nThis endpoint retrieves all graphs the user has access to.\n\nArgs:\n    auth: Authentication context\n\nReturns:\n    List[Graph]: List of graph objects",
        "operationId": "list_graphs_graphs_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Graph"
                  },
                  "title": "Response List Graphs Graphs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/local/generate_uri": {
      "post": {
        "summary": "Generate Local Uri",
        "description": "Generate a local URI for development. This endpoint is unprotected.",
        "operationId": "generate_local_uri_local_generate_uri_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_local_uri_local_generate_uri_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Generate Local Uri Local Generate Uri Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_create_cache_cache_create_post": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "docs": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Docs"
          }
        },
        "type": "object",
        "title": "Body_create_cache_cache_create_post"
      },
      "Body_generate_local_uri_local_generate_uri_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "admin"
          },
          "expiry_days": {
            "type": "integer",
            "title": "Expiry Days",
            "default": 30
          }
        },
        "type": "object",
        "title": "Body_generate_local_uri_local_generate_uri_post"
      },
      "Body_ingest_file_ingest_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_ingest_file_ingest_file_post"
      },
      "Body_update_document_file_documents__document_id__update_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "update_strategy": {
            "type": "string",
            "title": "Update Strategy",
            "default": "add"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_update_document_file_documents__document_id__update_file_post"
      },
      "ChunkResult": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "chunk_number": {
            "type": "integer",
            "title": "Chunk Number"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "download_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Download Url"
          }
        },
        "type": "object",
        "required": [
          "content",
          "score",
          "document_id",
          "chunk_number",
          "metadata",
          "content_type"
        ],
        "title": "ChunkResult",
        "description": "Query result at chunk level"
      },
      "ChunkSource": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "chunk_number": {
            "type": "integer",
            "title": "Chunk Number"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "chunk_number"
        ],
        "title": "ChunkSource",
        "description": "Source information for a chunk used in completion"
      },
      "CompletionQueryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "k": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "K",
            "default": 4
          },
          "min_score": {
            "type": "number",
            "title": "Min Score",
            "default": 0
          },
          "use_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Reranking"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "graph_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Name",
            "description": "Name of the graph to use for knowledge graph-enhanced retrieval"
          },
          "hop_depth": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 3,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Hop Depth",
            "description": "Number of relationship hops to traverse in the graph",
            "default": 1
          },
          "include_paths": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Paths",
            "description": "Whether to include relationship paths in the response",
            "default": false
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "CompletionQueryRequest",
        "description": "Request model for completion generation"
      },
      "CompletionResponse": {
        "properties": {
          "completion": {
            "type": "string",
            "title": "Completion"
          },
          "usage": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Usage"
          },
          "finish_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finish Reason"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/ChunkSource"
            },
            "type": "array",
            "title": "Sources",
            "default": []
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "completion",
          "usage"
        ],
        "title": "CompletionResponse",
        "description": "Response from completion generation"
      },
      "CreateGraphRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the graph to create"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Optional metadata filters to determine which documents to include"
          },
          "documents": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documents",
            "description": "Optional list of specific document IDs to include"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateGraphRequest",
        "description": "Request model for creating a graph"
      },
      "Document": {
        "properties": {
          "external_id": {
            "type": "string",
            "title": "External Id"
          },
          "owner": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Owner"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "storage_info": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Storage Info"
          },
          "storage_files": {
            "items": {
              "$ref": "#/components/schemas/StorageFileInfo"
            },
            "type": "array",
            "title": "Storage Files"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "additional_metadata": {
            "type": "object",
            "title": "Additional Metadata"
          },
          "access_control": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Access Control"
          },
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids"
          }
        },
        "type": "object",
        "required": [
          "owner",
          "content_type"
        ],
        "title": "Document",
        "description": "Represents a document stored in MongoDB documents collection"
      },
      "DocumentContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url",
              "string"
            ],
            "title": "Type"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename",
            "description": "Filename when type is url"
          }
        },
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "title": "DocumentContent",
        "description": "Represents either a URL or content string"
      },
      "DocumentResult": {
        "properties": {
          "score": {
            "type": "number",
            "title": "Score"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "content": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "additional_metadata": {
            "type": "object",
            "title": "Additional Metadata"
          }
        },
        "type": "object",
        "required": [
          "score",
          "document_id",
          "metadata",
          "content",
          "additional_metadata"
        ],
        "title": "DocumentResult",
        "description": "Query result at document level"
      },
      "Entity": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "properties": {
            "type": "object",
            "title": "Properties"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "chunk_sources": {
            "additionalProperties": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Chunk Sources"
          }
        },
        "type": "object",
        "required": [
          "label",
          "type"
        ],
        "title": "Entity",
        "description": "Represents an entity in a knowledge graph"
      },
      "Graph": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "entities": {
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "type": "array",
            "title": "Entities"
          },
          "relationships": {
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "type": "array",
            "title": "Relationships"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "owner": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Owner"
          },
          "access_control": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Access Control"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Graph",
        "description": "Represents a knowledge graph"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IngestTextRequest": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "rules": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Rules"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "IngestTextRequest",
        "description": "Request model for ingesting text content"
      },
      "Relationship": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "source_id": {
            "type": "string",
            "title": "Source Id"
          },
          "target_id": {
            "type": "string",
            "title": "Target Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "chunk_sources": {
            "additionalProperties": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Chunk Sources"
          }
        },
        "type": "object",
        "required": [
          "source_id",
          "target_id",
          "type"
        ],
        "title": "Relationship",
        "description": "Represents a relationship between entities in a knowledge graph"
      },
      "RetrieveRequest": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "k": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "K",
            "default": 4
          },
          "min_score": {
            "type": "number",
            "title": "Min Score",
            "default": 0
          },
          "use_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Reranking"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "graph_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Name",
            "description": "Name of the graph to use for knowledge graph-enhanced retrieval"
          },
          "hop_depth": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 3,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Hop Depth",
            "description": "Number of relationship hops to traverse in the graph",
            "default": 1
          },
          "include_paths": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Paths",
            "description": "Whether to include relationship paths in the response",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "RetrieveRequest",
        "description": "Base retrieve request model"
      },
      "StorageFileInfo": {
        "properties": {
          "bucket": {
            "type": "string",
            "title": "Bucket"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "default": 1
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "bucket",
          "key"
        ],
        "title": "StorageFileInfo",
        "description": "Information about a file stored in storage"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}