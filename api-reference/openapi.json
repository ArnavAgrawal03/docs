{
  "openapi": "3.1.0",
  "info": {
    "title": "Morphik API",
    "version": "0.1.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Basic health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "summary": "Readiness Check",
        "description": "Readiness check that verifies the application is initialized.",
        "operationId": "readiness_check_health_ready_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/ingest/text": {
      "post": {
        "summary": "Ingest Text",
        "description": "Ingest a text document.\n\nArgs:\n    request: IngestTextRequest containing:\n        - content: Text content to ingest\n        - filename: Optional filename to help determine content type\n        - metadata: Optional metadata dictionary\n        - rules: Optional list of rules. Each rule should be either:\n               - MetadataExtractionRule: {\"type\": \"metadata_extraction\", \"schema\": {...}}\n               - NaturalLanguageRule: {\"type\": \"natural_language\", \"prompt\": \"...\"}\n        - folder_name: Optional folder to scope the document to\n        - end_user_id: Optional end-user ID to scope the document to\n    auth: Authentication context\n\nReturns:\n    Document: Metadata of ingested document",
        "operationId": "ingest_text_ingest_text_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ingest/file": {
      "post": {
        "summary": "Ingest File",
        "description": "Ingest a file document asynchronously.\n\nArgs:\n    file: File to ingest\n    metadata: JSON string of metadata\n    rules: JSON string of rules list. Each rule should be either:\n           - MetadataExtractionRule: {\"type\": \"metadata_extraction\", \"schema\": {...}}\n           - NaturalLanguageRule: {\"type\": \"natural_language\", \"prompt\": \"...\"}\n    auth: Authentication context\n    use_colpali: Whether to use ColPali embedding model\n    folder_name: Optional folder to scope the document to\n    end_user_id: Optional end-user ID to scope the document to\n    redis: Redis connection pool for background tasks\n\nReturns:\n    Document with processing status that can be used to check progress",
        "operationId": "ingest_file_ingest_file_post",
        "parameters": [
          {
            "name": "use_colpali",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Colpali"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ingest_file_ingest_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ingest/files": {
      "post": {
        "summary": "Batch Ingest Files",
        "description": "Batch ingest multiple files using the task queue.\n\nArgs:\n    files: List of files to ingest\n    metadata: JSON string of metadata (either a single dict or list of dicts)\n    rules: JSON string of rules list. Can be either:\n           - A single list of rules to apply to all files\n           - A list of rule lists, one per file\n    use_colpali: Whether to use ColPali-style embedding\n    folder_name: Optional folder to scope the documents to\n    end_user_id: Optional end-user ID to scope the documents to\n    auth: Authentication context\n    redis: Redis connection pool for background tasks\n\nReturns:\n    BatchIngestResponse containing:\n        - documents: List of created documents with processing status\n        - errors: List of errors that occurred during the batch operation",
        "operationId": "batch_ingest_files_ingest_files_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_batch_ingest_files_ingest_files_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchIngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/chunks": {
      "post": {
        "summary": "Retrieve Chunks",
        "description": "Retrieve relevant chunks.\n\nArgs:\n    request: RetrieveRequest containing:\n        - query: Search query text\n        - filters: Optional metadata filters\n        - k: Number of results (default: 4)\n        - min_score: Minimum similarity threshold (default: 0.0)\n        - use_reranking: Whether to use reranking\n        - use_colpali: Whether to use ColPali-style embedding model\n        - folder_name: Optional folder to scope the search to\n        - end_user_id: Optional end-user ID to scope the search to\n    auth: Authentication context\n\nReturns:\n    List[ChunkResult]: List of relevant chunks",
        "operationId": "retrieve_chunks_retrieve_chunks_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResult"
                  },
                  "title": "Response Retrieve Chunks Retrieve Chunks Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/docs": {
      "post": {
        "summary": "Retrieve Documents",
        "description": "Retrieve relevant documents.\n\nArgs:\n    request: RetrieveRequest containing:\n        - query: Search query text\n        - filters: Optional metadata filters\n        - k: Number of results (default: 4)\n        - min_score: Minimum similarity threshold (default: 0.0)\n        - use_reranking: Whether to use reranking\n        - use_colpali: Whether to use ColPali-style embedding model\n        - folder_name: Optional folder to scope the search to\n        - end_user_id: Optional end-user ID to scope the search to\n    auth: Authentication context\n\nReturns:\n    List[DocumentResult]: List of relevant documents",
        "operationId": "retrieve_documents_retrieve_docs_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentResult"
                  },
                  "title": "Response Retrieve Documents Retrieve Docs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/batch/documents": {
      "post": {
        "summary": "Batch Get Documents",
        "description": "Retrieve multiple documents by their IDs in a single batch operation.\n\nArgs:\n    request: Dictionary containing:\n        - document_ids: List of document IDs to retrieve\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n    auth: Authentication context\n\nReturns:\n    List[Document]: List of documents matching the IDs",
        "operationId": "batch_get_documents_batch_documents_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "title": "Response Batch Get Documents Batch Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/batch/chunks": {
      "post": {
        "summary": "Batch Get Chunks",
        "description": "Retrieve specific chunks by their document ID and chunk number in a single batch operation.\n\nArgs:\n    request: Dictionary containing:\n        - sources: List of ChunkSource objects (with document_id and chunk_number)\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n    auth: Authentication context\n\nReturns:\n    List[ChunkResult]: List of chunk results",
        "operationId": "batch_get_chunks_batch_chunks_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResult"
                  },
                  "title": "Response Batch Get Chunks Batch Chunks Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "summary": "Query Completion",
        "description": "Generate completion using relevant chunks as context.\n\nWhen graph_name is provided, the query will leverage the knowledge graph\nto enhance retrieval by finding relevant entities and their connected documents.\n\nArgs:\n    request: CompletionQueryRequest containing:\n        - query: Query text\n        - filters: Optional metadata filters\n        - k: Number of chunks to use as context (default: 4)\n        - min_score: Minimum similarity threshold (default: 0.0)\n        - max_tokens: Maximum tokens in completion\n        - temperature: Model temperature\n        - use_reranking: Whether to use reranking\n        - use_colpali: Whether to use ColPali-style embedding model\n        - graph_name: Optional name of the graph to use for knowledge graph-enhanced retrieval\n        - hop_depth: Number of relationship hops to traverse in the graph (1-3)\n        - include_paths: Whether to include relationship paths in the response\n        - prompt_overrides: Optional customizations for entity extraction, resolution, and query prompts\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n        - schema: Optional schema for structured output\n    auth: Authentication context\n\nReturns:\n    CompletionResponse: Generated text completion or structured output",
        "operationId": "query_completion_query_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents": {
      "post": {
        "summary": "List Documents",
        "description": "List accessible documents.\n\nArgs:\n    auth: Authentication context\n    skip: Number of documents to skip\n    limit: Maximum number of documents to return\n    filters: Optional metadata filters\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    List[Document]: List of accessible documents",
        "operationId": "list_documents_documents_post",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10000,
              "title": "Limit"
            }
          },
          {
            "name": "folder_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Folder Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Filters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "title": "Response List Documents Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}": {
      "get": {
        "summary": "Get Document",
        "description": "Get document by ID.",
        "operationId": "get_document_documents__document_id__get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Document",
        "description": "Delete a document and all associated data.\n\nThis endpoint deletes a document and all its associated data, including:\n- Document metadata\n- Document content in storage\n- Document chunks and embeddings in vector store\n\nArgs:\n    document_id: ID of the document to delete\n    auth: Authentication context (must have write access to the document)\n\nReturns:\n    Deletion status",
        "operationId": "delete_document_documents__document_id__delete",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/status": {
      "get": {
        "summary": "Get Document Status",
        "description": "Get the processing status of a document.\n\nArgs:\n    document_id: ID of the document to check\n    auth: Authentication context\n\nReturns:\n    Dict containing status information for the document",
        "operationId": "get_document_status_documents__document_id__status_get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Document Status Documents  Document Id  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/filename/{filename}": {
      "get": {
        "summary": "Get Document By Filename",
        "description": "Get document by filename.\n\nArgs:\n    filename: Filename of the document to retrieve\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    Document: Document metadata if found and accessible",
        "operationId": "get_document_by_filename_documents_filename__filename__get",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          },
          {
            "name": "folder_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Folder Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_text": {
      "post": {
        "summary": "Update Document Text",
        "description": "Update a document with new text content using the specified strategy.\n\nArgs:\n    document_id: ID of the document to update\n    request: Text content and metadata for the update\n    update_strategy: Strategy for updating the document (default: 'add')\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_text_documents__document_id__update_text_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "update_strategy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "add",
              "title": "Update Strategy"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_file": {
      "post": {
        "summary": "Update Document File",
        "description": "Update a document with content from a file using the specified strategy.\n\nArgs:\n    document_id: ID of the document to update\n    file: File to add to the document\n    metadata: JSON string of metadata to merge with existing metadata\n    rules: JSON string of rules to apply to the content\n    update_strategy: Strategy for updating the document (default: 'add')\n    use_colpali: Whether to use multi-vector embedding\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_file_documents__document_id__update_file_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "use_colpali",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Colpali"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_document_file_documents__document_id__update_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_metadata": {
      "post": {
        "summary": "Update Document Metadata",
        "description": "Update only a document's metadata.\n\nArgs:\n    document_id: ID of the document to update\n    metadata: New metadata to merge with existing metadata\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_metadata_documents__document_id__update_metadata_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/stats": {
      "get": {
        "summary": "Get Usage Stats",
        "description": "Get usage statistics for the authenticated user.",
        "operationId": "get_usage_stats_usage_stats_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "title": "Response Get Usage Stats Usage Stats Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/recent": {
      "get": {
        "summary": "Get Recent Usage",
        "description": "Get recent usage records.",
        "operationId": "get_recent_usage_usage_recent_get",
        "parameters": [
          {
            "name": "operation_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Operation Type"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Since"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Recent Usage Usage Recent Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/create": {
      "post": {
        "summary": "Create Cache",
        "description": "Create a new cache with specified configuration.",
        "operationId": "create_cache_cache_create_post",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "model",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model"
            }
          },
          {
            "name": "gguf_file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Gguf File"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_cache_cache_create_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Cache Cache Create Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}": {
      "get": {
        "summary": "Get Cache",
        "description": "Get cache configuration by name.",
        "operationId": "get_cache_cache__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Cache Cache  Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/update": {
      "post": {
        "summary": "Update Cache",
        "description": "Update cache with new documents matching its filter.",
        "operationId": "update_cache_cache__name__update_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Update Cache Cache  Name  Update Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/add_docs": {
      "post": {
        "summary": "Add Docs To Cache",
        "description": "Add specific documents to the cache.",
        "operationId": "add_docs_to_cache_cache__name__add_docs_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Docs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Add Docs To Cache Cache  Name  Add Docs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/query": {
      "post": {
        "summary": "Query Cache",
        "description": "Query the cache with a prompt.",
        "operationId": "query_cache_cache__name__query_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Query"
            }
          },
          {
            "name": "max_tokens",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tokens"
            }
          },
          {
            "name": "temperature",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/create": {
      "post": {
        "summary": "Create Graph",
        "description": "Create a graph from documents.\n\nThis endpoint extracts entities and relationships from documents\nmatching the specified filters or document IDs and creates a graph.\n\nArgs:\n    request: CreateGraphRequest containing:\n        - name: Name of the graph to create\n        - filters: Optional metadata filters to determine which documents to include\n        - documents: Optional list of specific document IDs to include\n        - prompt_overrides: Optional customizations for entity extraction and resolution prompts\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n    auth: Authentication context\n\nReturns:\n    Graph: The created graph object",
        "operationId": "create_graph_graph_create_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGraphRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders": {
      "post": {
        "summary": "Create Folder",
        "description": "Create a new folder.\n\nArgs:\n    folder_create: Folder creation request containing name and optional description\n    auth: Authentication context\n\nReturns:\n    Folder: Created folder",
        "operationId": "create_folder_folders_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Folders",
        "description": "List all folders the user has access to.\n\nArgs:\n    auth: Authentication context\n\nReturns:\n    List[Folder]: List of folders",
        "operationId": "list_folders_folders_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  },
                  "title": "Response List Folders Folders Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}": {
      "get": {
        "summary": "Get Folder",
        "description": "Get a folder by ID.\n\nArgs:\n    folder_id: ID of the folder\n    auth: Authentication context\n\nReturns:\n    Folder: Folder if found and accessible",
        "operationId": "get_folder_folders__folder_id__get",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/documents/{document_id}": {
      "post": {
        "summary": "Add Document To Folder",
        "description": "Add a document to a folder.\n\nArgs:\n    folder_id: ID of the folder\n    document_id: ID of the document\n    auth: Authentication context\n\nReturns:\n    Success status",
        "operationId": "add_document_to_folder_folders__folder_id__documents__document_id__post",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Document From Folder",
        "description": "Remove a document from a folder.\n\nArgs:\n    folder_id: ID of the folder\n    document_id: ID of the document\n    auth: Authentication context\n\nReturns:\n    Success status",
        "operationId": "remove_document_from_folder_folders__folder_id__documents__document_id__delete",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}": {
      "get": {
        "summary": "Get Graph",
        "description": "Get a graph by name.\n\nThis endpoint retrieves a graph by its name if the user has access to it.\n\nArgs:\n    name: Name of the graph to retrieve\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    Graph: The requested graph object",
        "operationId": "get_graph_graph__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "folder_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Folder Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graphs": {
      "get": {
        "summary": "List Graphs",
        "description": "List all graphs the user has access to.\n\nThis endpoint retrieves all graphs the user has access to.\n\nArgs:\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    List[Graph]: List of graph objects",
        "operationId": "list_graphs_graphs_get",
        "parameters": [
          {
            "name": "folder_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Folder Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Graph"
                  },
                  "title": "Response List Graphs Graphs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}/update": {
      "post": {
        "summary": "Update Graph",
        "description": "Update an existing graph with new documents.\n\nThis endpoint processes additional documents based on the original graph filters\nand/or new filters/document IDs, extracts entities and relationships, and\nupdates the graph with new information.\n\nArgs:\n    name: Name of the graph to update\n    request: UpdateGraphRequest containing:\n        - additional_filters: Optional additional metadata filters to determine which new documents to include\n        - additional_documents: Optional list of additional document IDs to include\n        - prompt_overrides: Optional customizations for entity extraction and resolution prompts\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n    auth: Authentication context\n\nReturns:\n    Graph: The updated graph object",
        "operationId": "update_graph_graph__name__update_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGraphRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/local/generate_uri": {
      "post": {
        "summary": "Generate Local Uri",
        "description": "Generate a local URI for development. This endpoint is unprotected.",
        "operationId": "generate_local_uri_local_generate_uri_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_local_uri_local_generate_uri_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Generate Local Uri Local Generate Uri Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cloud/generate_uri": {
      "post": {
        "summary": "Generate Cloud Uri",
        "description": "Generate a URI for cloud hosted applications.",
        "operationId": "generate_cloud_uri_cloud_generate_uri_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateUriRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Generate Cloud Uri Cloud Generate Uri Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/set_rule": {
      "post": {
        "summary": "Set Folder Rule",
        "description": "Set extraction rules for a folder.\n\nArgs:\n    folder_id: ID of the folder to set rules for\n    request: SetFolderRuleRequest containing metadata extraction rules\n    auth: Authentication context\n    apply_to_existing: Whether to apply rules to existing documents in the folder\n\nReturns:\n    Success status with processing results",
        "operationId": "set_folder_rule_folders__folder_id__set_rule_post",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "apply_to_existing",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Apply To Existing"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetFolderRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseModel": {
        "properties": {

        },
        "type": "object",
        "title": "BaseModel"
      },
      "BatchIngestResponse": {
        "properties": {
          "documents": {
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "type": "array",
            "title": "Documents"
          },
          "errors": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "documents",
          "errors"
        ],
        "title": "BatchIngestResponse",
        "description": "Response model for batch ingestion"
      },
      "Body_batch_ingest_files_ingest_files_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "parallel": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallel",
            "default": true
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_batch_ingest_files_ingest_files_post"
      },
      "Body_create_cache_cache_create_post": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "docs": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Docs"
          }
        },
        "type": "object",
        "title": "Body_create_cache_cache_create_post"
      },
      "Body_generate_local_uri_local_generate_uri_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "admin"
          },
          "expiry_days": {
            "type": "integer",
            "title": "Expiry Days",
            "default": 30
          }
        },
        "type": "object",
        "title": "Body_generate_local_uri_local_generate_uri_post"
      },
      "Body_ingest_file_ingest_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_ingest_file_ingest_file_post"
      },
      "Body_update_document_file_documents__document_id__update_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "update_strategy": {
            "type": "string",
            "title": "Update Strategy",
            "default": "add"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_update_document_file_documents__document_id__update_file_post"
      },
      "ChunkResult": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "chunk_number": {
            "type": "integer",
            "title": "Chunk Number"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "download_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Download Url"
          }
        },
        "type": "object",
        "required": [
          "content",
          "score",
          "document_id",
          "chunk_number",
          "metadata",
          "content_type"
        ],
        "title": "ChunkResult",
        "description": "Query result at chunk level"
      },
      "ChunkSource": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "chunk_number": {
            "type": "integer",
            "title": "Chunk Number"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "chunk_number"
        ],
        "title": "ChunkSource",
        "description": "Source information for a chunk used in completion"
      },
      "CompletionQueryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "k": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "K",
            "default": 4
          },
          "min_score": {
            "type": "number",
            "title": "Min Score",
            "default": 0
          },
          "use_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Reranking"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "graph_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Name",
            "description": "Name of the graph to use for knowledge graph-enhanced retrieval"
          },
          "hop_depth": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 3,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Hop Depth",
            "description": "Number of relationship hops to traverse in the graph",
            "default": 1
          },
          "include_paths": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Paths",
            "description": "Whether to include relationship paths in the response",
            "default": false
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature"
          },
          "prompt_overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryPromptOverrides"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional customizations for entity extraction, resolution, and query prompts"
          },
          "schema": {
            "anyOf": [
              {

              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Schema",
            "description": "Schema for structured output, can be a Pydantic model or JSON schema dict"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "CompletionQueryRequest",
        "description": "Request model for completion generation"
      },
      "CompletionResponse": {
        "properties": {
          "completion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/BaseModel"
              }
            ],
            "title": "Completion"
          },
          "usage": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Usage"
          },
          "finish_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finish Reason"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/ChunkSource"
            },
            "type": "array",
            "title": "Sources",
            "default": []
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "completion",
          "usage"
        ],
        "title": "CompletionResponse",
        "description": "Response from completion generation"
      },
      "CreateGraphRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the graph to create"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Optional metadata filters to determine which documents to include"
          },
          "documents": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documents",
            "description": "Optional list of specific document IDs to include"
          },
          "prompt_overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GraphPromptOverrides"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional customizations for entity extraction and resolution prompts",
            "example": {
              "entity_extraction": {
                "examples": [
                  {
                    "label": "Example",
                    "type": "ENTITY"
                  }
                ],
                "prompt_template": "Extract entities from the following text: {content}\n{examples}"
              }
            }
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateGraphRequest",
        "description": "Request model for creating a graph"
      },
      "Document": {
        "properties": {
          "external_id": {
            "type": "string",
            "title": "External Id"
          },
          "owner": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Owner"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "storage_info": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Storage Info"
          },
          "storage_files": {
            "items": {
              "$ref": "#/components/schemas/StorageFileInfo"
            },
            "type": "array",
            "title": "Storage Files"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "additional_metadata": {
            "type": "object",
            "title": "Additional Metadata"
          },
          "access_control": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Access Control"
          },
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids"
          }
        },
        "type": "object",
        "required": [
          "owner",
          "content_type"
        ],
        "title": "Document",
        "description": "Represents a document stored in the database documents collection"
      },
      "DocumentContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url",
              "string"
            ],
            "title": "Type"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename",
            "description": "Filename when type is url"
          }
        },
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "title": "DocumentContent",
        "description": "Represents either a URL or content string"
      },
      "DocumentResult": {
        "properties": {
          "score": {
            "type": "number",
            "title": "Score"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "content": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "additional_metadata": {
            "type": "object",
            "title": "Additional Metadata"
          }
        },
        "type": "object",
        "required": [
          "score",
          "document_id",
          "metadata",
          "content",
          "additional_metadata"
        ],
        "title": "DocumentResult",
        "description": "Query result at document level"
      },
      "Entity": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "properties": {
            "type": "object",
            "title": "Properties"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "chunk_sources": {
            "additionalProperties": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Chunk Sources"
          }
        },
        "type": "object",
        "required": [
          "label",
          "type"
        ],
        "title": "Entity",
        "description": "Represents an entity in a knowledge graph"
      },
      "EntityExtractionExample": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The entity label (e.g., 'John Doe', 'Apple Inc.')"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The entity type (e.g., 'PERSON', 'ORGANIZATION', 'PRODUCT')"
          },
          "properties": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "description": "Optional properties of the entity (e.g., {'role': 'CEO', 'age': 42})"
          }
        },
        "type": "object",
        "required": [
          "label",
          "type"
        ],
        "title": "EntityExtractionExample",
        "description": "Example entity for guiding entity extraction.\n\nUsed to provide domain-specific examples to the LLM of what entities to extract.\nThese examples help steer the extraction process toward entities relevant to your domain."
      },
      "EntityExtractionPromptOverride": {
        "properties": {
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template",
            "description": "Custom prompt template, MUST include both {content} and {examples} placeholders. The {content} placeholder will be replaced with the text to analyze, and {examples} will be replaced with formatted examples."
          },
          "examples": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityExtractionExample"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Examples",
            "description": "Examples of entities to extract, used to guide the LLM toward domain-specific entity types and patterns."
          }
        },
        "type": "object",
        "title": "EntityExtractionPromptOverride",
        "description": "Configuration for customizing entity extraction prompts.\n\nThis allows you to override both the prompt template used for entity extraction\nand provide domain-specific examples of entities to be extracted.\n\nIf only examples are provided (without a prompt_template), they will be\nincorporated into the default prompt. If only prompt_template is provided,\nit will be used with default examples (if any).\n\nRequired placeholders:\n- {content}: Will be replaced with the text to analyze for entity extraction\n- {examples}: Will be replaced with formatted examples of entities to extract\n\nExample prompt template:\n```\nExtract entities from the following text. Look for entities similar to these examples:\n\n{examples}\n\nText to analyze:\n{content}\n\nExtracted entities (in JSON format):\n```"
      },
      "EntityResolutionExample": {
        "properties": {
          "canonical": {
            "type": "string",
            "title": "Canonical",
            "description": "The canonical (standard/preferred) form of the entity"
          },
          "variants": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Variants",
            "description": "List of variant forms that should resolve to the canonical form"
          }
        },
        "type": "object",
        "required": [
          "canonical",
          "variants"
        ],
        "title": "EntityResolutionExample",
        "description": "Example for entity resolution, showing how variants should be grouped.\n\nEntity resolution is the process of identifying when different references\n(variants) in text refer to the same real-world entity. These examples\nhelp the LLM understand domain-specific patterns for resolving entities."
      },
      "EntityResolutionPromptOverride": {
        "properties": {
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template",
            "description": "Custom prompt template that MUST include both {entities_str} and {examples_json} placeholders. The {entities_str} placeholder will be replaced with the extracted entities, and {examples_json} will be replaced with JSON-formatted examples of entity resolution groups."
          },
          "examples": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityResolutionExample"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Examples",
            "description": "Examples of entity resolution groups showing how variants of the same entity should be resolved to their canonical forms. This is particularly useful for domain-specific terminology, abbreviations, and naming conventions."
          }
        },
        "type": "object",
        "title": "EntityResolutionPromptOverride",
        "description": "Configuration for customizing entity resolution prompts.\n\nEntity resolution identifies and groups variant forms of the same entity.\nThis override allows you to customize how this process works by providing\na custom prompt template and/or domain-specific examples.\n\nIf only examples are provided (without a prompt_template), they will be\nincorporated into the default prompt. If only prompt_template is provided,\nit will be used with default examples (if any).\n\nRequired placeholders:\n- {entities_str}: Will be replaced with the extracted entities\n- {examples_json}: Will be replaced with JSON-formatted examples of entity resolution groups\n\nExample prompt template:\n```\nI have extracted the following entities:\n\n{entities_str}\n\nBelow are examples of how different entity references can be grouped together:\n\n{examples_json}\n\nGroup the above entities by resolving which mentions refer to the same entity.\nReturn the results in JSON format.\n```"
      },
      "Folder": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "owner": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Owner"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "access_control": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Access Control"
          },
          "rules": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Rules"
          }
        },
        "type": "object",
        "required": [
          "name",
          "owner"
        ],
        "title": "Folder",
        "description": "Represents a folder that contains documents"
      },
      "FolderCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FolderCreate",
        "description": "Request model for folder creation"
      },
      "GenerateUriRequest": {
        "properties": {
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "ID of the application"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the application"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "ID of the user who owns the app"
          },
          "expiry_days": {
            "type": "integer",
            "title": "Expiry Days",
            "description": "Number of days until the token expires",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "app_id",
          "name",
          "user_id"
        ],
        "title": "GenerateUriRequest",
        "description": "Request model for generating a cloud URI"
      },
      "Graph": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "entities": {
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "type": "array",
            "title": "Entities"
          },
          "relationships": {
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "type": "array",
            "title": "Relationships"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "owner": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Owner"
          },
          "access_control": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Access Control"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Graph",
        "description": "Represents a knowledge graph"
      },
      "GraphPromptOverrides": {
        "properties": {
          "entity_extraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityExtractionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity extraction prompts - controls how entities are identified in text during graph operations"
          },
          "entity_resolution": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityResolutionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity resolution prompts - controls how variant forms are grouped during graph operations"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "GraphPromptOverrides",
        "description": "Container for graph-related prompt overrides.\n\nUse this class when customizing prompts for graph operations like\ncreate_graph() and update_graph(), which only support entity extraction\nand entity resolution customizations.\n\nThis class enforces that only graph-relevant override types are used."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IngestTextRequest": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "rules": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Rules"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "IngestTextRequest",
        "description": "Request model for ingesting text content"
      },
      "MetadataExtractionRuleRequest": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "metadata_extraction"
          },
          "schema": {
            "type": "object",
            "title": "Schema"
          }
        },
        "type": "object",
        "title": "MetadataExtractionRuleRequest",
        "description": "Request model for metadata extraction rule"
      },
      "QueryPromptOverride": {
        "properties": {
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template",
            "description": "Custom prompt template for generating responses to queries. REQUIRED PLACEHOLDERS: {question} and {context} must be included in the template. The {question} placeholder will be replaced with the user query, and {context} will be replaced with the retrieved content. Use this to control response style, format, and tone."
          }
        },
        "type": "object",
        "title": "QueryPromptOverride",
        "description": "Configuration for customizing query prompts.\n\nThis allows you to customize how responses are generated during query operations.\nQuery prompts guide the LLM on how to format and style responses, what tone to use,\nand how to incorporate retrieved information into the response.\n\nRequired placeholders:\n- {question}: Will be replaced with the user's query\n- {context}: Will be replaced with the retrieved content/context\n\nExample prompt template:\n```\nAnswer the following question based on the provided information.\n\nQuestion: {question}\n\nContext:\n{context}\n\nAnswer:\n```"
      },
      "QueryPromptOverrides": {
        "properties": {
          "entity_extraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityExtractionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity extraction prompts - controls how entities are identified in text during queries"
          },
          "entity_resolution": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityResolutionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity resolution prompts - controls how variant forms are grouped during queries"
          },
          "query": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for query prompts - controls response generation style, format, and tone"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "QueryPromptOverrides",
        "description": "Container for query-related prompt overrides.\n\nUse this class when customizing prompts for query operations, which may\ninclude customizations for entity extraction, entity resolution, and\nthe query/response generation itself.\n\nThis is the most feature-complete override class, supporting all customization types.\n\nAvailable customizations:\n- entity_extraction: Customize how entities are identified in text\n- entity_resolution: Customize how entity variants are grouped\n- query: Customize response generation style, format, and tone\n\nEach type has its own required placeholders. See the specific class documentation\nfor details and examples."
      },
      "Relationship": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "source_id": {
            "type": "string",
            "title": "Source Id"
          },
          "target_id": {
            "type": "string",
            "title": "Target Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "chunk_sources": {
            "additionalProperties": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Chunk Sources"
          }
        },
        "type": "object",
        "required": [
          "source_id",
          "target_id",
          "type"
        ],
        "title": "Relationship",
        "description": "Represents a relationship between entities in a knowledge graph"
      },
      "RetrieveRequest": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "k": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "K",
            "default": 4
          },
          "min_score": {
            "type": "number",
            "title": "Min Score",
            "default": 0
          },
          "use_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Reranking"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "graph_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Name",
            "description": "Name of the graph to use for knowledge graph-enhanced retrieval"
          },
          "hop_depth": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 3,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Hop Depth",
            "description": "Number of relationship hops to traverse in the graph",
            "default": 1
          },
          "include_paths": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Paths",
            "description": "Whether to include relationship paths in the response",
            "default": false
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "RetrieveRequest",
        "description": "Base retrieve request model"
      },
      "SetFolderRuleRequest": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/MetadataExtractionRuleRequest"
            },
            "type": "array",
            "title": "Rules"
          }
        },
        "type": "object",
        "required": [
          "rules"
        ],
        "title": "SetFolderRuleRequest",
        "description": "Request model for setting folder rules"
      },
      "StorageFileInfo": {
        "properties": {
          "bucket": {
            "type": "string",
            "title": "Bucket"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "default": 1
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "bucket",
          "key"
        ],
        "title": "StorageFileInfo",
        "description": "Information about a file stored in storage"
      },
      "UpdateGraphRequest": {
        "properties": {
          "additional_filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Filters",
            "description": "Optional additional metadata filters to determine which new documents to include"
          },
          "additional_documents": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Documents",
            "description": "Optional list of additional document IDs to include"
          },
          "prompt_overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GraphPromptOverrides"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional customizations for entity extraction and resolution prompts"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "title": "UpdateGraphRequest",
        "description": "Request model for updating a graph"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}