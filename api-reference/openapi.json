{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/ping": {
      "get": {
        "summary": "Ping Health",
        "description": "Simple health check endpoint that returns 200 OK.",
        "operationId": "ping_health_ping_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/models": {
      "get": {
        "summary": "Get Available Models",
        "description": "Get list of available models from configuration.\n\nReturns models grouped by type (chat, embedding, etc.) with their metadata.",
        "operationId": "get_available_models_models_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Save Model",
        "description": "Save a custom model configuration.",
        "operationId": "save_model_models_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ingest/text": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Ingest Text",
        "description": "Ingest a **text** document.\n\nArgs:\n    request: IngestTextRequest payload containing:\n        • content – raw text to ingest.\n        • filename – optional filename to help detect MIME-type.\n        • metadata – optional JSON metadata dict.\n        • rules – optional list of extraction / NL rules.\n        • folder_name – optional folder scope.\n        • end_user_id – optional end-user scope.\n    auth: Decoded JWT context (injected).\n\nReturns:\n    Document metadata row representing the newly-ingested text.",
        "operationId": "ingest_text_ingest_text_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ingest/file": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Ingest File",
        "description": "Ingest a **file** asynchronously.\n\nThe file is uploaded to object storage, a *Document* stub is persisted\nwith ``status='processing'`` and a background worker picks up the heavy\nparsing / chunking work.\n\nArgs:\n    file: Uploaded file from multipart/form-data.\n    metadata: JSON-string representing user metadata.\n    rules: JSON-string with extraction / NL rules list.\n    auth: Caller context – must include *write* permission.\n    use_colpali: Switch to multi-vector embeddings.\n    folder_name: Optionally scope doc to a folder.\n    end_user_id: Optionally scope doc to an end-user.\n    redis: arq redis connection – used to enqueue the job.\n\nReturns:\n    Document stub with ``status='processing'``.",
        "operationId": "ingest_file_ingest_file_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ingest_file_ingest_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ingest/files": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Batch Ingest Files",
        "description": "Batch ingest **multiple files** (async).\n\nEach file is treated the same as :func:`ingest_file` but sharing the same\nrequest avoids many round-trips. All heavy work is still delegated to the\nbackground worker pool.\n\nArgs:\n    files: List of files to upload.\n    metadata: Either a single JSON-string dict or list of dicts matching\n        the number of files.\n    rules: Either a single rules list or list-of-lists per file.\n    use_colpali: Enable multi-vector embeddings.\n    folder_name: Optional folder scoping for **all** files.\n    end_user_id: Optional end-user scoping for **all** files.\n    auth: Caller context with *write* permission.\n    redis: arq redis connection to enqueue jobs.\n\nReturns:\n    BatchIngestResponse summarising created documents & errors.",
        "operationId": "batch_ingest_files_ingest_files_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_batch_ingest_files_ingest_files_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchIngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/document/chat/{chat_id}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Get Document Chat History",
        "description": "Retrieve the message history for a document chat conversation.\n\nArgs:\n    chat_id: Identifier of the document chat conversation.\n    auth: Authentication context used to verify access to the conversation.\n    redis: Redis connection where chat messages are stored.\n\nReturns:\n    A list of message dictionaries or an empty list if no history exists.",
        "operationId": "get_document_chat_history_document_chat__chat_id__get",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/document/chat/{chat_id}/complete": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Complete Document Chat",
        "description": "Stream a chat completion response for a document chat conversation.\n\nArgs:\n    chat_id: Identifier of the document chat conversation.\n    request: The chat request containing the user message.\n    auth: Authentication context.\n    redis: Redis connection for chat history storage.\n\nReturns:\n    StreamingResponse with the assistant's response.",
        "operationId": "complete_document_chat_document_chat__chat_id__complete_post",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/workflows": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Create Workflow",
        "description": "Create a new workflow.",
        "operationId": "create_workflow_workflows_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflows",
        "description": "List workflows visible to the caller.",
        "operationId": "list_workflows_workflows_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  },
                  "title": "Response List Workflows Workflows Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/workflows/{workflow_id}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow",
        "operationId": "get_workflow_workflows__workflow_id__get",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update Workflow",
        "operationId": "update_workflow_workflows__workflow_id__put",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Updates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete Workflow",
        "operationId": "delete_workflow_workflows__workflow_id__delete",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Delete Workflow Workflows  Workflow Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/workflows/{workflow_id}/run/{document_id}": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Run Workflow",
        "description": "Queue a workflow run and return immediately.\n\nThe heavy execution is scheduled in a *BackgroundTask* so the request\nfinishes quickly, enabling the UI to update the document row to\n\"processing\" without waiting for LLM calls.",
        "operationId": "run_workflow_workflows__workflow_id__run__document_id__post",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/workflows/runs/{run_id}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow Run",
        "operationId": "get_workflow_run_workflows_runs__run_id__get",
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete Workflow Run",
        "description": "Delete a workflow run.",
        "operationId": "delete_workflow_run_workflows_runs__run_id__delete",
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Delete Workflow Run Workflows Runs  Run Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/workflows/{workflow_id}/runs": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow Runs",
        "description": "Get all runs for a specific workflow.",
        "operationId": "get_workflow_runs_workflows__workflow_id__runs_get",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowRun"
                  },
                  "title": "Response Get Workflow Runs Workflows  Workflow Id  Runs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/model-config/": {
      "get": {
        "tags": [
          "model-config"
        ],
        "summary": "List Model Configs",
        "description": "List all model configurations for the authenticated user and app.",
        "operationId": "list_model_configs_model_config__get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelConfigResponse"
                  },
                  "title": "Response List Model Configs Model Config  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "model-config"
        ],
        "summary": "Create Model Config",
        "description": "Create a new model configuration.",
        "operationId": "create_model_config_model_config__post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelConfigCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/model-config/{config_id}": {
      "get": {
        "tags": [
          "model-config"
        ],
        "summary": "Get Model Config",
        "description": "Get a specific model configuration.",
        "operationId": "get_model_config_model_config__config_id__get",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "model-config"
        ],
        "summary": "Update Model Config",
        "description": "Update an existing model configuration.",
        "operationId": "update_model_config_model_config__config_id__put",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "model-config"
        ],
        "summary": "Delete Model Config",
        "description": "Delete a model configuration.",
        "operationId": "delete_model_config_model_config__config_id__delete",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Delete Model Config Model Config  Config Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/model-config/custom-models/list": {
      "get": {
        "tags": [
          "model-config"
        ],
        "summary": "List Custom Models",
        "description": "List all custom models for the authenticated user.",
        "operationId": "list_custom_models_model_config_custom_models_list_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomModel"
                  },
                  "title": "Response List Custom Models Model Config Custom Models List Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/model-config/custom-models": {
      "post": {
        "tags": [
          "model-config"
        ],
        "summary": "Create Custom Model",
        "description": "Create a new custom model.",
        "operationId": "create_custom_model_model_config_custom_models_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomModelCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/custom": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List Custom Models",
        "description": "List all custom models for the authenticated user.",
        "operationId": "list_custom_models_models_custom_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelResponse"
                  },
                  "title": "Response List Custom Models Models Custom Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_id}": {
      "delete": {
        "tags": [
          "models"
        ],
        "summary": "Delete Model",
        "description": "Delete a custom model.",
        "operationId": "delete_model_models__model_id__delete",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Delete Model Models  Model Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api-keys": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Save Api Key",
        "description": "Save API key for a provider.",
        "operationId": "save_api_key_api_keys_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveApiKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Save Api Key Api Keys Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "models"
        ],
        "summary": "List Api Keys",
        "description": "List all configured API keys (sanitized).",
        "operationId": "list_api_keys_api_keys_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "title": "Response List Api Keys Api Keys Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/logs/": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Get Logs",
        "description": "Return recent logs for the authenticated user (scoped by user_id).",
        "operationId": "get_logs_logs__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Since"
            }
          },
          {
            "name": "op_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Op Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  },
                  "title": "Response Get Logs Logs  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/create_app": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create App",
        "description": "Generate a cloud URI for *request.app_id* owned by the calling user.\n\nThe *user_id* is derived from the bearer token.  The caller can therefore\nnot create applications for *other* users unless their token carries the\n``admin`` permission (mirroring the community behaviour).",
        "operationId": "create_app_ee_create_app_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateUriEERequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Create App Ee Create App Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/apps": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create App Route",
        "description": "Provision a **brand-new** Neon database for *request.app_name*.\n\nThe caller must be authenticated to the dedicated Morphik instance.  The\nauthenticated user (represented by the JWT's *user_id*) becomes the owner\nof the provisioned app.",
        "operationId": "create_app_route_ee_apps_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete App Route",
        "description": "Destroy the Neon project and metadata associated with *app_name*.\n\nOnly the owner of the application (identified via *auth.user_id*) may\nperform this destructive action.",
        "operationId": "delete_app_route_ee_apps_delete",
        "parameters": [
          {
            "name": "app_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the application to delete",
              "title": "App Name"
            },
            "description": "Name of the application to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NukeAppResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/auth_status": {
      "get": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "Get Auth Status For Connector",
        "description": "Checks the current authentication status for the given connector type.",
        "operationId": "get_auth_status_for_connector_ee_connectors__connector_type__auth_status_get",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorAuthStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/auth/initiate_url": {
      "get": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "Get Initiate Auth Url",
        "description": "Return the provider's *authorization_url* for the given connector.\n\nThe method mirrors the logic of the `/auth/initiate` endpoint but sends a\nJSON payload instead of a redirect so that browsers can stay on the same\norigin until they intentionally navigate away.\n\nFor OAuth-based connectors, this returns authorization_url.\nFor manual credential connectors, this returns the credential form specification.",
        "operationId": "get_initiate_auth_url_ee_connectors__connector_type__auth_initiate_url_get",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "app_redirect_uri",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "App Redirect Uri"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ManualCredentialsAuthResponse"
                    },
                    {
                      "$ref": "#/components/schemas/OAuthAuthResponse"
                    }
                  ],
                  "title": "Response Get Initiate Auth Url Ee Connectors  Connector Type  Auth Initiate Url Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/oauth2callback": {
      "get": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "Connector Oauth Callback",
        "description": "Handles the OAuth 2.0 callback from the authentication provider.\nValidates state, finalizes authentication, and stores credentials.",
        "operationId": "connector_oauth_callback_ee_connectors__connector_type__oauth2callback_get",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          },
          {
            "name": "error_description",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Description"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/auth/finalize": {
      "post": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "Finalize Manual Auth",
        "description": "Finalize authentication using manual credentials.\n\nThis endpoint is used for connectors that require manual credential input\n(like Zotero) instead of OAuth flows.",
        "operationId": "finalize_manual_auth_ee_connectors__connector_type__auth_finalize_post",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Finalize Manual Auth Ee Connectors  Connector Type  Auth Finalize Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/files": {
      "get": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "List Files For Connector",
        "description": "Lists files and folders from the specified connector.",
        "operationId": "list_files_for_connector_ee_connectors__connector_type__files_get",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Path"
            }
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Page Token"
            }
          },
          {
            "name": "q_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Q Filter"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Page Size"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/ingest": {
      "post": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "Ingest File From Connector",
        "description": "Downloads a file from the connector and ingests it into Morphik via DocumentService.",
        "operationId": "ingest_file_from_connector_ee_connectors__connector_type__ingest_post",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestFromConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Ingest File From Connector Ee Connectors  Connector Type  Ingest Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ee/connectors/{connector_type}/disconnect": {
      "post": {
        "tags": [
          "EE - Connectors"
        ],
        "summary": "Disconnect From Connector",
        "description": "Disconnects the user from the specified connector by removing stored credentials.",
        "operationId": "disconnect_from_connector_ee_connectors__connector_type__disconnect_post",
        "parameters": [
          {
            "name": "connector_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Type"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Disconnect From Connector Ee Connectors  Connector Type  Disconnect Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/chunks": {
      "post": {
        "summary": "Retrieve Chunks",
        "description": "Retrieve relevant chunks.\n\nArgs:\n    request: RetrieveRequest containing:\n        - query: Search query text\n        - filters: Optional metadata filters\n        - k: Number of results (default: 4)\n        - min_score: Minimum similarity threshold (default: 0.0)\n        - use_reranking: Whether to use reranking\n        - use_colpali: Whether to use ColPali-style embedding model\n        - folder_name: Optional folder to scope the search to\n        - end_user_id: Optional end-user ID to scope the search to\n    auth: Authentication context\n\nReturns:\n    List[ChunkResult]: List of relevant chunks",
        "operationId": "retrieve_chunks_retrieve_chunks_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResult"
                  },
                  "title": "Response Retrieve Chunks Retrieve Chunks Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/chunks/grouped": {
      "post": {
        "summary": "Retrieve Chunks Grouped",
        "description": "Retrieve relevant chunks with grouped response format.\n\nReturns both flat results (for backward compatibility) and grouped results (for UI).\nWhen padding \u003E 0, groups chunks by main matches and their padding chunks.\n\nArgs:\n    request: RetrieveRequest containing query, filters, padding, etc.\n    auth: Authentication context\n\nReturns:\n    GroupedChunkResponse: Contains both flat chunks and grouped chunks",
        "operationId": "retrieve_chunks_grouped_retrieve_chunks_grouped_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupedChunkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrieve/docs": {
      "post": {
        "summary": "Retrieve Documents",
        "description": "Retrieve relevant documents.\n\nArgs:\n    request: RetrieveRequest containing:\n        - query: Search query text\n        - filters: Optional metadata filters\n        - k: Number of results (default: 4)\n        - min_score: Minimum similarity threshold (default: 0.0)\n        - use_reranking: Whether to use reranking\n        - use_colpali: Whether to use ColPali-style embedding model\n        - folder_name: Optional folder to scope the search to\n        - end_user_id: Optional end-user ID to scope the search to\n    auth: Authentication context\n\nReturns:\n    List[DocumentResult]: List of relevant documents",
        "operationId": "retrieve_documents_retrieve_docs_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentResult"
                  },
                  "title": "Response Retrieve Documents Retrieve Docs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/batch/documents": {
      "post": {
        "summary": "Batch Get Documents",
        "description": "Retrieve multiple documents by their IDs in a single batch operation.\n\nArgs:\n    request: Dictionary containing:\n        - document_ids: List of document IDs to retrieve\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n    auth: Authentication context\n\nReturns:\n    List[Document]: List of documents matching the IDs",
        "operationId": "batch_get_documents_batch_documents_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "title": "Response Batch Get Documents Batch Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/batch/chunks": {
      "post": {
        "summary": "Batch Get Chunks",
        "description": "Retrieve specific chunks by their document ID and chunk number in a single batch operation.\n\nArgs:\n    request: Dictionary containing:\n        - sources: List of ChunkSource objects (with document_id and chunk_number)\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n        - use_colpali: Whether to use ColPali-style embedding\n    auth: Authentication context\n\nReturns:\n    List[ChunkResult]: List of chunk results",
        "operationId": "batch_get_chunks_batch_chunks_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResult"
                  },
                  "title": "Response Batch Get Chunks Batch Chunks Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "summary": "Query Completion",
        "description": "Generate completion using relevant chunks as context.\n\nWhen graph_name is provided, the query will leverage the knowledge graph\nto enhance retrieval by finding relevant entities and their connected documents.\n\nArgs:\n    request: CompletionQueryRequest containing:\n        - query: Query text\n        - filters: Optional metadata filters\n        - k: Number of chunks to use as context (default: 4)\n        - min_score: Minimum similarity threshold (default: 0.0)\n        - max_tokens: Maximum tokens in completion\n        - temperature: Model temperature\n        - use_reranking: Whether to use reranking\n        - use_colpali: Whether to use ColPali-style embedding model\n        - graph_name: Optional name of the graph to use for knowledge graph-enhanced retrieval\n        - hop_depth: Number of relationship hops to traverse in the graph (1-3)\n        - include_paths: Whether to include relationship paths in the response\n        - prompt_overrides: Optional customizations for entity extraction, resolution, and query prompts\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n        - schema: Optional schema for structured output\n        - chat_id: Optional chat conversation identifier for maintaining history\n    auth: Authentication context\n\nReturns:\n    CompletionResponse: Generated text completion or structured output",
        "operationId": "query_completion_query_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chat/{chat_id}": {
      "get": {
        "summary": "Get Chat History",
        "description": "Retrieve the message history for a chat conversation.\n\nArgs:\n    chat_id: Identifier of the conversation whose history should be loaded.\n    auth: Authentication context used to verify access to the conversation.\n    redis: Redis connection where chat messages are stored.\n\nReturns:\n    A list of :class:`ChatMessage` objects or an empty list if no history\n    exists.",
        "operationId": "get_chat_history_chat__chat_id__get",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  },
                  "title": "Response Get Chat History Chat  Chat Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/available": {
      "get": {
        "summary": "Get Available Models For Selection",
        "description": "Get list of available models for UI selection.\n\nReturns a list of models that can be used for queries. Each model includes:\n- id: Model identifier to use in llm_config\n- name: Display name for the model\n- provider: The LLM provider (e.g., openai, anthropic, ollama)\n- description: Optional description of the model",
        "operationId": "get_available_models_for_selection_models_available_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/agent": {
      "post": {
        "summary": "Agent Query",
        "description": "Execute an agent-style query using the :class:`MorphikAgent`.\n\nArgs:\n    request: The query payload containing the natural language question and optional chat_id.\n    auth: Authentication context used to enforce limits and access control.\n    redis: Redis connection for chat history storage.\n\nReturns:\n    A dictionary with the agent's full response.",
        "operationId": "agent_query_agent_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Agent Query Agent Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents": {
      "post": {
        "summary": "List Documents",
        "description": "List accessible documents.\n\nArgs:\n    auth: Authentication context\n    skip: Number of documents to skip\n    limit: Maximum number of documents to return\n    filters: Optional metadata filters\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    List[Document]: List of accessible documents",
        "operationId": "list_documents_documents_post",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10000,
              "title": "Limit"
            }
          },
          {
            "name": "folder_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Folder Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Filters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "title": "Response List Documents Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}": {
      "get": {
        "summary": "Get Document",
        "description": "Retrieve a single document by its external identifier.\n\nArgs:\n    document_id: External ID of the document to fetch.\n    auth: Authentication context used to verify access rights.\n\nReturns:\n    The :class:`Document` metadata if found.",
        "operationId": "get_document_documents__document_id__get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Document",
        "description": "Delete a document and all associated data.\n\nThis endpoint deletes a document and all its associated data, including:\n- Document metadata\n- Document content in storage\n- Document chunks and embeddings in vector store\n\nArgs:\n    document_id: ID of the document to delete\n    auth: Authentication context (must have write access to the document)\n\nReturns:\n    Deletion status",
        "operationId": "delete_document_documents__document_id__delete",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/status": {
      "get": {
        "summary": "Get Document Status",
        "description": "Get the processing status of a document.\n\nArgs:\n    document_id: ID of the document to check\n    auth: Authentication context\n\nReturns:\n    Dict containing status information for the document",
        "operationId": "get_document_status_documents__document_id__status_get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Document Status Documents  Document Id  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/filename/{filename}": {
      "get": {
        "summary": "Get Document By Filename",
        "description": "Get document by filename.\n\nArgs:\n    filename: Filename of the document to retrieve\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    Document: Document metadata if found and accessible",
        "operationId": "get_document_by_filename_documents_filename__filename__get",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Folder Name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/download_url": {
      "get": {
        "summary": "Get Document Download Url",
        "description": "Get a download URL for a specific document.\n\nArgs:\n    document_id: External ID of the document\n    auth: Authentication context\n    expires_in: URL expiration time in seconds (default: 1 hour)\n\nReturns:\n    Dictionary containing the download URL and metadata",
        "operationId": "get_document_download_url_documents__document_id__download_url_get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "expires_in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "URL expiration time in seconds",
              "default": 3600,
              "title": "Expires In"
            },
            "description": "URL expiration time in seconds"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/file": {
      "get": {
        "summary": "Download Document File",
        "description": "Download the actual file content for a document.\nThis endpoint is used for local storage when file:// URLs cannot be accessed by browsers.\n\nArgs:\n    document_id: External ID of the document\n    auth: Authentication context\n\nReturns:\n    StreamingResponse with the file content",
        "operationId": "download_document_file_documents__document_id__file_get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_text": {
      "post": {
        "summary": "Update Document Text",
        "description": "Update a document with new text content using the specified strategy.\n\nArgs:\n    document_id: ID of the document to update\n    request: Text content and metadata for the update\n    update_strategy: Strategy for updating the document (default: 'add')\n    auth: Authentication context\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_text_documents__document_id__update_text_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "update_strategy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "add",
              "title": "Update Strategy"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_file": {
      "post": {
        "summary": "Update Document File",
        "description": "Update a document with content from a file using the specified strategy.\n\nArgs:\n    document_id: ID of the document to update\n    file: File to add to the document\n    metadata: JSON string of metadata to merge with existing metadata\n    rules: JSON string of rules to apply to the content\n    update_strategy: Strategy for updating the document (default: 'add')\n    use_colpali: Whether to use multi-vector embedding\n    auth: Authentication context\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_file_documents__document_id__update_file_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_document_file_documents__document_id__update_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document_id}/update_metadata": {
      "post": {
        "summary": "Update Document Metadata",
        "description": "Update only a document's metadata.\n\nArgs:\n    document_id: ID of the document to update\n    metadata: New metadata to merge with existing metadata\n    auth: Authentication context\n\nReturns:\n    Document: Updated document metadata",
        "operationId": "update_document_metadata_documents__document_id__update_metadata_post",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/stats": {
      "get": {
        "summary": "Get Usage Stats",
        "description": "Get usage statistics for the authenticated user.\n\nArgs:\n    auth: Authentication context identifying the caller.\n\nReturns:\n    A mapping of operation types to token usage counts.",
        "operationId": "get_usage_stats_usage_stats_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "title": "Response Get Usage Stats Usage Stats Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/recent": {
      "get": {
        "summary": "Get Recent Usage",
        "description": "Retrieve recent telemetry records for the user or application.\n\nArgs:\n    auth: Authentication context; admin users receive global records.\n    operation_type: Optional operation type to filter by.\n    since: Only return records newer than this timestamp.\n    status: Optional status filter (e.g. ``success`` or ``error``).\n\nReturns:\n    A list of usage entries sorted by timestamp, each represented as a\n    dictionary.",
        "operationId": "get_recent_usage_usage_recent_get",
        "parameters": [
          {
            "name": "operation_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Operation Type"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Since"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Recent Usage Usage Recent Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/create": {
      "post": {
        "summary": "Create Cache",
        "description": "Create a persistent cache for low-latency completions.\n\nArgs:\n    name: Unique identifier for the cache.\n    model: The model name to use when generating completions.\n    gguf_file: Path to the ``gguf`` weights file to load.\n    filters: Optional metadata filters used to select documents.\n    docs: Explicit list of document IDs to include in the cache.\n    auth: Authentication context used for permission checks.\n\nReturns:\n    A dictionary describing the created cache.",
        "operationId": "create_cache_cache_create_post",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "model",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model"
            }
          },
          {
            "name": "gguf_file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Gguf File"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_cache_cache_create_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Cache Cache Create Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}": {
      "get": {
        "summary": "Get Cache",
        "description": "Retrieve information about a specific cache.\n\nArgs:\n    name: Name of the cache to inspect.\n    auth: Authentication context used to authorize the request.\n\nReturns:\n    A dictionary with a boolean ``exists`` field indicating whether the\n    cache is loaded.",
        "operationId": "get_cache_cache__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Cache Cache  Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/update": {
      "post": {
        "summary": "Update Cache",
        "description": "Refresh an existing cache with newly available documents.\n\nArgs:\n    name: Identifier of the cache to update.\n    auth: Authentication context used for permission checks.\n\nReturns:\n    A dictionary indicating whether any documents were added.",
        "operationId": "update_cache_cache__name__update_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Update Cache Cache  Name  Update Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/add_docs": {
      "post": {
        "summary": "Add Docs To Cache",
        "description": "Manually add documents to an existing cache.\n\nArgs:\n    name: Name of the target cache.\n    docs: List of document IDs to insert.\n    auth: Authentication context used for authorization.\n\nReturns:\n    A dictionary indicating whether the documents were queued for addition.",
        "operationId": "add_docs_to_cache_cache__name__add_docs_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Docs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Add Docs To Cache Cache  Name  Add Docs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cache/{name}/query": {
      "post": {
        "summary": "Query Cache",
        "description": "Generate a completion using a pre-populated cache.\n\nArgs:\n    name: Name of the cache to query.\n    query: Prompt text to send to the model.\n    max_tokens: Optional maximum number of tokens to generate.\n    temperature: Optional sampling temperature for the model.\n    auth: Authentication context for permission checks.\n\nReturns:\n    A :class:`CompletionResponse` object containing the model output.",
        "operationId": "query_cache_cache__name__query_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Query"
            }
          },
          {
            "name": "max_tokens",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tokens"
            }
          },
          {
            "name": "temperature",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/create": {
      "post": {
        "summary": "Create Graph",
        "description": "Create a new graph based on document contents.\n\nThe graph is created asynchronously. A stub graph record is returned with\n``status = \"processing\"`` while a background task extracts entities and\nrelationships.\n\nArgs:\n    request: Graph creation parameters including name and optional filters.\n    auth: Authentication context authorizing the operation.\n\nReturns:\n    The placeholder :class:`Graph` object which clients can poll for status.",
        "operationId": "create_graph_graph_create_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGraphRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders": {
      "post": {
        "summary": "Create Folder",
        "description": "Create a new folder.\n\nArgs:\n    folder_create: Folder creation request containing name and optional description\n    auth: Authentication context\n\nReturns:\n    Folder: Created folder",
        "operationId": "create_folder_folders_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Folders",
        "description": "List all folders the user has access to.\n\nArgs:\n    auth: Authentication context\n\nReturns:\n    List[Folder]: List of folders",
        "operationId": "list_folders_folders_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  },
                  "title": "Response List Folders Folders Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/summary": {
      "get": {
        "summary": "List Folder Summaries",
        "description": "Return compact folder list (id, name, doc_count, updated_at).",
        "operationId": "list_folder_summaries_folders_summary_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderSummary"
                  },
                  "title": "Response List Folder Summaries Folders Summary Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}": {
      "get": {
        "summary": "Get Folder",
        "description": "Get a folder by ID.\n\nArgs:\n    folder_id: ID of the folder\n    auth: Authentication context\n\nReturns:\n    Folder: Folder if found and accessible",
        "operationId": "get_folder_folders__folder_id__get",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_name}": {
      "delete": {
        "summary": "Delete Folder",
        "description": "Delete a folder and all associated documents.\n\nArgs:\n    folder_name: Name of the folder to delete\n    auth: Authentication context (must have write access to the folder)\n\nReturns:\n    Deletion status",
        "operationId": "delete_folder_folders__folder_name__delete",
        "parameters": [
          {
            "name": "folder_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/documents/{document_id}": {
      "post": {
        "summary": "Add Document To Folder",
        "description": "Add a document to a folder.\n\nArgs:\n    folder_id: ID of the folder\n    document_id: ID of the document\n    auth: Authentication context\n\nReturns:\n    Success status",
        "operationId": "add_document_to_folder_folders__folder_id__documents__document_id__post",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Document From Folder",
        "description": "Remove a document from a folder.\n\nArgs:\n    folder_id: ID of the folder\n    document_id: ID of the document\n    auth: Authentication context\n\nReturns:\n    Success status",
        "operationId": "remove_document_from_folder_folders__folder_id__documents__document_id__delete",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}": {
      "get": {
        "summary": "Get Graph",
        "description": "Get a graph by name.\n\nThis endpoint retrieves a graph by its name if the user has access to it.\n\nArgs:\n    name: Name of the graph to retrieve\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    Graph: The requested graph object",
        "operationId": "get_graph_graph__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Folder Name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Graph",
        "description": "Delete a graph by name.\n\nArgs:\n    name: Name of the graph to delete\n    auth: Authentication context (must have write access to the graph)\n\nReturns:\n    Deletion status",
        "operationId": "delete_graph_graph__name__delete",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete Graph Graph  Name  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graphs": {
      "get": {
        "summary": "List Graphs",
        "description": "List all graphs the user has access to.\n\nThis endpoint retrieves all graphs the user has access to.\n\nArgs:\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    List[Graph]: List of graph objects",
        "operationId": "list_graphs_graphs_get",
        "parameters": [
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Folder Name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Graph"
                  },
                  "title": "Response List Graphs Graphs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}/visualization": {
      "get": {
        "summary": "Get Graph Visualization",
        "description": "Get graph visualization data.\n\nThis endpoint retrieves the nodes and links data needed for graph visualization.\nIt works with both local and API-based graph services.\n\nArgs:\n    name: Name of the graph to visualize\n    auth: Authentication context\n    folder_name: Optional folder to scope the operation to\n    end_user_id: Optional end-user ID to scope the operation to\n\nReturns:\n    Dict: Visualization data containing nodes and links arrays",
        "operationId": "get_graph_visualization_graph__name__visualization_get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Folder Name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Graph Visualization Graph  Name  Visualization Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}/update": {
      "post": {
        "summary": "Update Graph",
        "description": "Update an existing graph with new documents.\n\nThis endpoint processes additional documents based on the original graph filters\nand/or new filters/document IDs, extracts entities and relationships, and\nupdates the graph with new information.\n\nArgs:\n    name: Name of the graph to update\n    request: UpdateGraphRequest containing:\n        - additional_filters: Optional additional metadata filters to determine which new documents to include\n        - additional_documents: Optional list of additional document IDs to include\n        - prompt_overrides: Optional customizations for entity extraction and resolution prompts\n        - folder_name: Optional folder to scope the operation to\n        - end_user_id: Optional end-user ID to scope the operation to\n    auth: Authentication context\n\nReturns:\n    Graph: The updated graph object",
        "operationId": "update_graph_graph__name__update_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGraphRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/{name}/status": {
      "get": {
        "summary": "Get Graph Status",
        "description": "Lightweight endpoint to check graph status with automatic status synchronization.\n\nThis endpoint:\n1. First checks the local database for graph status\n2. If status is 'processing' and has workflow_id, checks the external workflow status\n3. Updates the local database if workflow has completed\n4. Returns the current status and optionally pipeline stage information",
        "operationId": "get_graph_status_graph__name__status_get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "end_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Folder Name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Graph Status Graph  Name  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/graph/workflow/{workflow_id}/status": {
      "get": {
        "summary": "Check Workflow Status",
        "description": "Check the status of a graph build/update workflow.\n\nThis endpoint polls the external graph API to check the status of an async operation.\n\nArgs:\n    workflow_id: The workflow ID returned from build/update operations\n    run_id: Optional run ID for the specific workflow run\n    auth: Authentication context\n\nReturns:\n    Dict containing status ('running', 'completed', or 'failed') and optional result",
        "operationId": "check_workflow_status_graph_workflow__workflow_id__status_get",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "run_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Check Workflow Status Graph Workflow  Workflow Id  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/local/generate_uri": {
      "post": {
        "summary": "Generate Local Uri",
        "description": "Generate a development URI for running Morphik locally.\n\nArgs:\n    name: Developer name to embed in the token payload.\n    expiry_days: Number of days the generated token should remain valid.\n\nReturns:\n    A dictionary containing the ``uri`` that can be used to connect to the\n    local instance.",
        "operationId": "generate_local_uri_local_generate_uri_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_local_uri_local_generate_uri_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Generate Local Uri Local Generate Uri Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cloud/generate_uri": {
      "post": {
        "summary": "Generate Cloud Uri",
        "description": "Generate an authenticated URI for a cloud-hosted Morphik application.\n\nArgs:\n    request: Parameters for URI generation including ``app_id`` and ``name``.\n    authorization: Bearer token of the user requesting the URI.\n\nReturns:\n    A dictionary with the generated ``uri`` and associated ``app_id``.",
        "operationId": "generate_cloud_uri_cloud_generate_uri_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateUriRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Generate Cloud Uri Cloud Generate Uri Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/set_rule": {
      "post": {
        "summary": "Set Folder Rule",
        "description": "Set extraction rules for a folder.\n\nArgs:\n    folder_id: ID of the folder to set rules for\n    request: SetFolderRuleRequest containing metadata extraction rules\n    auth: Authentication context\n    apply_to_existing: Whether to apply rules to existing documents in the folder\n\nReturns:\n    Success status with processing results",
        "operationId": "set_folder_rule_folders__folder_id__set_rule_post",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "apply_to_existing",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Apply To Existing"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetFolderRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/workflows/{workflow_id}": {
      "post": {
        "summary": "Associate Workflow To Folder",
        "description": "Associate a workflow with a folder for automatic execution on document ingestion.",
        "operationId": "associate_workflow_to_folder_folders__folder_id__workflows__workflow_id__post",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Associate Workflow To Folder Folders  Folder Id  Workflows  Workflow Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Disassociate Workflow From Folder",
        "description": "Remove a workflow association from a folder.",
        "operationId": "disassociate_workflow_from_folder_folders__folder_id__workflows__workflow_id__delete",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workflow Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Disassociate Workflow From Folder Folders  Folder Id  Workflows  Workflow Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/workflows": {
      "get": {
        "summary": "List Folder Workflows",
        "description": "List all workflows associated with a folder.",
        "operationId": "list_folder_workflows_folders__folder_id__workflows_get",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  },
                  "title": "Response List Folder Workflows Folders  Folder Id  Workflows Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cloud/apps": {
      "delete": {
        "summary": "Delete Cloud App",
        "description": "Delete all resources associated with a given cloud application.\n\nArgs:\n    app_name: Name of the application whose data should be removed.\n    auth: Authentication context of the requesting user.\n\nReturns:\n    A summary describing how many documents and folders were removed.",
        "operationId": "delete_cloud_app_cloud_apps_delete",
        "parameters": [
          {
            "name": "app_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the application to delete",
              "title": "App Name"
            },
            "description": "Name of the application to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete Cloud App Cloud Apps Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chats": {
      "get": {
        "summary": "List Chat Conversations",
        "description": "List chat conversations available to the current user.\n\nArgs:\n    auth: Authentication context containing user and app identifiers.\n    limit: Maximum number of conversations to return (1-500)\n\nReturns:\n    A list of dictionaries describing each conversation, ordered by most\n    recent activity.",
        "operationId": "list_chat_conversations_chats_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response List Chat Conversations Chats Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chats/{chat_id}/title": {
      "patch": {
        "summary": "Update Chat Title",
        "description": "Update the title of a chat conversation.\n\nArgs:\n    chat_id: ID of the chat conversation to update\n    title: New title for the chat\n    auth: Authentication context\n\nReturns:\n    Success status",
        "operationId": "update_chat_title_chats__chat_id__title_patch",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat Id"
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "New title for the chat",
              "title": "Title"
            },
            "description": "New title for the chat"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentQueryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Natural language query for the Morphik agent"
          },
          "chat_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat Id",
            "description": "Optional chat session ID for persisting conversation history"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "AgentQueryRequest",
        "description": "Request model for agent queries"
      },
      "BaseModel": {
        "properties": {

        },
        "type": "object",
        "title": "BaseModel"
      },
      "BatchIngestResponse": {
        "properties": {
          "documents": {
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "type": "array",
            "title": "Documents"
          },
          "errors": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "documents",
          "errors"
        ],
        "title": "BatchIngestResponse",
        "description": "Response model for batch ingestion"
      },
      "Body_batch_ingest_files_ingest_files_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_batch_ingest_files_ingest_files_post"
      },
      "Body_create_cache_cache_create_post": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "docs": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Docs"
          }
        },
        "type": "object",
        "title": "Body_create_cache_cache_create_post"
      },
      "Body_generate_local_uri_local_generate_uri_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "admin"
          },
          "expiry_days": {
            "type": "integer",
            "title": "Expiry Days",
            "default": 30
          }
        },
        "type": "object",
        "title": "Body_generate_local_uri_local_generate_uri_post"
      },
      "Body_ingest_file_ingest_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_ingest_file_ingest_file_post"
      },
      "Body_update_document_file_documents__document_id__update_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "default": "{}"
          },
          "rules": {
            "type": "string",
            "title": "Rules",
            "default": "[]"
          },
          "update_strategy": {
            "type": "string",
            "title": "Update Strategy",
            "default": "add"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_update_document_file_documents__document_id__update_file_post"
      },
      "ChatMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant"
            ],
            "title": "Role"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "agent_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Data"
          }
        },
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "title": "ChatMessage",
        "description": "Simple chat message model for chat persistence."
      },
      "ChunkGroup": {
        "properties": {
          "main_chunk": {
            "$ref": "#/components/schemas/ChunkResult"
          },
          "padding_chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkResult"
            },
            "type": "array",
            "title": "Padding Chunks"
          },
          "total_chunks": {
            "type": "integer",
            "title": "Total Chunks",
            "description": "Total number of chunks in this group"
          }
        },
        "type": "object",
        "required": [
          "main_chunk",
          "total_chunks"
        ],
        "title": "ChunkGroup",
        "description": "Represents a group of chunks: one main match + its padding chunks"
      },
      "ChunkResult": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "chunk_number": {
            "type": "integer",
            "title": "Chunk Number"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "download_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Download Url"
          },
          "is_padding": {
            "type": "boolean",
            "title": "Is Padding",
            "description": "Whether this chunk was added as padding",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "content",
          "score",
          "document_id",
          "chunk_number",
          "metadata",
          "content_type"
        ],
        "title": "ChunkResult",
        "description": "Query result at chunk level"
      },
      "ChunkSource": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "chunk_number": {
            "type": "integer",
            "title": "Chunk Number"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "chunk_number"
        ],
        "title": "ChunkSource",
        "description": "Source information for a chunk used in completion"
      },
      "CompletionQueryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "k": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "K",
            "default": 4
          },
          "min_score": {
            "type": "number",
            "title": "Min Score",
            "default": 0
          },
          "use_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Reranking"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "padding": {
            "type": "integer",
            "minimum": 0,
            "title": "Padding",
            "description": "Number of additional chunks/pages to retrieve before and after matched chunks (ColPali only)",
            "default": 0
          },
          "graph_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Name",
            "description": "Name of the graph to use for knowledge graph-enhanced retrieval"
          },
          "hop_depth": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 3,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Hop Depth",
            "description": "Number of relationship hops to traverse in the graph",
            "default": 1
          },
          "include_paths": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Paths",
            "description": "Whether to include relationship paths in the response",
            "default": false
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation. Accepts a single folder name or a list of folder names."
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature"
          },
          "prompt_overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryPromptOverrides"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional customizations for entity extraction, resolution, and query prompts"
          },
          "schema": {
            "anyOf": [
              {

              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Schema",
            "description": "Schema for structured output, can be a Pydantic model or JSON schema dict"
          },
          "chat_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat Id",
            "description": "Optional chat session ID for persisting conversation history"
          },
          "stream_response": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream Response",
            "description": "Whether to stream the response back in chunks",
            "default": false
          },
          "llm_config": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Config",
            "description": "LiteLLM-compatible model configuration (e.g., model name, API key, base URL)"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "CompletionQueryRequest",
        "description": "Request model for completion generation"
      },
      "CompletionResponse": {
        "properties": {
          "completion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/BaseModel"
              }
            ],
            "title": "Completion"
          },
          "usage": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Usage"
          },
          "finish_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finish Reason"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/ChunkSource"
            },
            "type": "array",
            "title": "Sources",
            "default": []
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "completion",
          "usage"
        ],
        "title": "CompletionResponse",
        "description": "Response from completion generation"
      },
      "ConfiguredAction": {
        "properties": {
          "action_id": {
            "type": "string",
            "title": "Action Id",
            "description": "Registry identifier of the action to execute"
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "JSON-serialisable parameters for the action"
          }
        },
        "type": "object",
        "required": [
          "action_id"
        ],
        "title": "ConfiguredAction",
        "description": "A single step inside a *Workflow* configuration.\n\nThe concrete implementation is looked-up at runtime via the *action_id* in\nthe Action Registry (see *core.workflows.registry*)."
      },
      "ConnectorAuthStatus": {
        "properties": {
          "is_authenticated": {
            "type": "boolean",
            "title": "Is Authenticated"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "auth_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Url"
          }
        },
        "type": "object",
        "required": [
          "is_authenticated"
        ],
        "title": "ConnectorAuthStatus"
      },
      "ConnectorFile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "is_folder": {
            "type": "boolean",
            "title": "Is Folder",
            "default": false
          },
          "mime_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mime Type"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "modified_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified Date"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "ConnectorFile"
      },
      "CreateAppRequest": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "Human-friendly name of the application to create"
          },
          "region": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region",
            "description": "Optional Neon region identifier (defaults to `aws-us-east-1`)"
          }
        },
        "type": "object",
        "required": [
          "app_name"
        ],
        "title": "CreateAppRequest"
      },
      "CreateAppResponse": {
        "properties": {
          "app_id": {
            "type": "string",
            "title": "App Id"
          },
          "app_name": {
            "type": "string",
            "title": "App Name"
          },
          "morphik_uri": {
            "type": "string",
            "title": "Morphik Uri"
          },
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "app_id",
          "app_name",
          "morphik_uri",
          "status"
        ],
        "title": "CreateAppResponse"
      },
      "CreateGraphRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the graph to create"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Optional metadata filters to determine which documents to include"
          },
          "documents": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documents",
            "description": "Optional list of specific document IDs to include"
          },
          "prompt_overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GraphPromptOverrides"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional customizations for entity extraction and resolution prompts",
            "example": {
              "entity_extraction": {
                "examples": [
                  {
                    "label": "Example",
                    "type": "ENTITY"
                  }
                ],
                "prompt_template": "Extract entities from the following text: {content}\n{examples}"
              }
            }
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation. Accepts a single folder name or a list of folder names."
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateGraphRequest",
        "description": "Request model for creating a graph"
      },
      "CredentialField": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "required": {
            "type": "boolean",
            "title": "Required"
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CredentialFieldOption"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "name",
          "label",
          "description",
          "type",
          "required"
        ],
        "title": "CredentialField"
      },
      "CredentialFieldOption": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value"
          },
          "label": {
            "type": "string",
            "title": "Label"
          }
        },
        "type": "object",
        "required": [
          "value",
          "label"
        ],
        "title": "CredentialFieldOption"
      },
      "CustomModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "config": {
            "type": "object",
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "provider",
          "model_name",
          "config"
        ],
        "title": "CustomModel",
        "description": "Custom model definition."
      },
      "CustomModelCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "config": {
            "type": "object",
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "name",
          "provider",
          "model_name",
          "config"
        ],
        "title": "CustomModelCreate",
        "description": "Request model for creating a custom model."
      },
      "Document": {
        "properties": {
          "external_id": {
            "type": "string",
            "title": "External Id"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "storage_info": {
            "type": "object",
            "title": "Storage Info"
          },
          "storage_files": {
            "items": {
              "$ref": "#/components/schemas/StorageFileInfo"
            },
            "type": "array",
            "title": "Storage Files"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "additional_metadata": {
            "type": "object",
            "title": "Additional Metadata"
          },
          "chunk_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunk Ids"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          },
          "app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Id"
          }
        },
        "type": "object",
        "required": [
          "content_type"
        ],
        "title": "Document",
        "description": "Represents a document stored in the database documents collection"
      },
      "DocumentChatRequest": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "DocumentChatRequest",
        "description": "Request model for document chat completion."
      },
      "DocumentContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url",
              "string"
            ],
            "title": "Type"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename",
            "description": "Filename when type is url"
          }
        },
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "title": "DocumentContent",
        "description": "Represents either a URL or content string"
      },
      "DocumentResult": {
        "properties": {
          "score": {
            "type": "number",
            "title": "Score"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "content": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "additional_metadata": {
            "type": "object",
            "title": "Additional Metadata"
          }
        },
        "type": "object",
        "required": [
          "score",
          "document_id",
          "metadata",
          "content",
          "additional_metadata"
        ],
        "title": "DocumentResult",
        "description": "Query result at document level"
      },
      "Entity": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "properties": {
            "type": "object",
            "title": "Properties"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "chunk_sources": {
            "additionalProperties": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Chunk Sources"
          }
        },
        "type": "object",
        "required": [
          "label",
          "type"
        ],
        "title": "Entity",
        "description": "Represents an entity in a knowledge graph"
      },
      "EntityExtractionExample": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The entity label (e.g., 'John Doe', 'Apple Inc.')"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The entity type (e.g., 'PERSON', 'ORGANIZATION', 'PRODUCT')"
          },
          "properties": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "description": "Optional properties of the entity (e.g., {'role': 'CEO', 'age': 42})"
          }
        },
        "type": "object",
        "required": [
          "label",
          "type"
        ],
        "title": "EntityExtractionExample",
        "description": "Example entity for guiding entity extraction.\n\nUsed to provide domain-specific examples to the LLM of what entities to extract.\nThese examples help steer the extraction process toward entities relevant to your domain."
      },
      "EntityExtractionPromptOverride": {
        "properties": {
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template",
            "description": "Custom prompt template, MUST include both {content} and {examples} placeholders. The {content} placeholder will be replaced with the text to analyze, and {examples} will be replaced with formatted examples."
          },
          "examples": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityExtractionExample"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Examples",
            "description": "Examples of entities to extract, used to guide the LLM toward domain-specific entity types and patterns."
          }
        },
        "type": "object",
        "title": "EntityExtractionPromptOverride",
        "description": "Configuration for customizing entity extraction prompts.\n\nThis allows you to override both the prompt template used for entity extraction\nand provide domain-specific examples of entities to be extracted.\n\nIf only examples are provided (without a prompt_template), they will be\nincorporated into the default prompt. If only prompt_template is provided,\nit will be used with default examples (if any).\n\nRequired placeholders:\n- {content}: Will be replaced with the text to analyze for entity extraction\n- {examples}: Will be replaced with formatted examples of entities to extract\n\nExample prompt template:\n```\nExtract entities from the following text. Look for entities similar to these examples:\n\n{examples}\n\nText to analyze:\n{content}\n\nExtracted entities (in JSON format):\n```"
      },
      "EntityResolutionExample": {
        "properties": {
          "canonical": {
            "type": "string",
            "title": "Canonical",
            "description": "The canonical (standard/preferred) form of the entity"
          },
          "variants": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Variants",
            "description": "List of variant forms that should resolve to the canonical form"
          }
        },
        "type": "object",
        "required": [
          "canonical",
          "variants"
        ],
        "title": "EntityResolutionExample",
        "description": "Example for entity resolution, showing how variants should be grouped.\n\nEntity resolution is the process of identifying when different references\n(variants) in text refer to the same real-world entity. These examples\nhelp the LLM understand domain-specific patterns for resolving entities."
      },
      "EntityResolutionPromptOverride": {
        "properties": {
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template",
            "description": "Custom prompt template that MUST include both {entities_str} and {examples_json} placeholders. The {entities_str} placeholder will be replaced with the extracted entities, and {examples_json} will be replaced with JSON-formatted examples of entity resolution groups."
          },
          "examples": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityResolutionExample"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Examples",
            "description": "Examples of entity resolution groups showing how variants of the same entity should be resolved to their canonical forms. This is particularly useful for domain-specific terminology, abbreviations, and naming conventions."
          }
        },
        "type": "object",
        "title": "EntityResolutionPromptOverride",
        "description": "Configuration for customizing entity resolution prompts.\n\nEntity resolution identifies and groups variant forms of the same entity.\nThis override allows you to customize how this process works by providing\na custom prompt template and/or domain-specific examples.\n\nIf only examples are provided (without a prompt_template), they will be\nincorporated into the default prompt. If only prompt_template is provided,\nit will be used with default examples (if any).\n\nRequired placeholders:\n- {entities_str}: Will be replaced with the extracted entities\n- {examples_json}: Will be replaced with JSON-formatted examples of entity resolution groups\n\nExample prompt template:\n```\nI have extracted the following entities:\n\n{entities_str}\n\nBelow are examples of how different entity references can be grouped together:\n\n{examples_json}\n\nGroup the above entities by resolving which mentions refer to the same entity.\nReturn the results in JSON format.\n```"
      },
      "FileListResponse": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/ConnectorFile"
            },
            "type": "array",
            "title": "Files"
          },
          "next_page_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page Token"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "FileListResponse"
      },
      "Folder": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "document_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Ids"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "rules": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Rules"
          },
          "workflow_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Workflow Ids",
            "description": "List of workflow IDs to run on document ingestion"
          },
          "app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Id"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Folder",
        "description": "Represents a folder that contains documents"
      },
      "FolderCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FolderCreate",
        "description": "Request model for folder creation"
      },
      "FolderSummary": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "doc_count": {
            "type": "integer",
            "title": "Doc Count",
            "default": 0
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "FolderSummary"
      },
      "GenerateUriEERequest": {
        "properties": {
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "ID of the application"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the application"
          },
          "expiry_days": {
            "type": "integer",
            "title": "Expiry Days",
            "description": "Token validity in days",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "app_id",
          "name"
        ],
        "title": "GenerateUriEERequest",
        "description": "Request body for the EE *generate_uri* endpoint (no ``user_id`` field)."
      },
      "GenerateUriRequest": {
        "properties": {
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "ID of the application"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the application"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "ID of the user who owns the app"
          },
          "expiry_days": {
            "type": "integer",
            "title": "Expiry Days",
            "description": "Number of days until the token expires",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "app_id",
          "name",
          "user_id"
        ],
        "title": "GenerateUriRequest",
        "description": "Request model for generating a cloud URI"
      },
      "Graph": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "entities": {
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "type": "array",
            "title": "Entities"
          },
          "relationships": {
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "type": "array",
            "title": "Relationships"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id"
          },
          "app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Id"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Graph",
        "description": "Represents a knowledge graph"
      },
      "GraphPromptOverrides": {
        "properties": {
          "entity_extraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityExtractionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity extraction prompts - controls how entities are identified in text during graph operations"
          },
          "entity_resolution": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityResolutionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity resolution prompts - controls how variant forms are grouped during graph operations"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "GraphPromptOverrides",
        "description": "Container for graph-related prompt overrides.\n\nUse this class when customizing prompts for graph operations like\ncreate_graph() and update_graph(), which only support entity extraction\nand entity resolution customizations.\n\nThis class enforces that only graph-relevant override types are used."
      },
      "GroupedChunkResponse": {
        "properties": {
          "chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkResult"
            },
            "type": "array",
            "title": "Chunks",
            "description": "Flat list of all chunks (for backward compatibility)"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/ChunkGroup"
            },
            "type": "array",
            "title": "Groups",
            "description": "Grouped chunks for UI display"
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "Total number of unique chunks"
          },
          "has_padding": {
            "type": "boolean",
            "title": "Has Padding",
            "description": "Whether padding was applied to any results"
          }
        },
        "type": "object",
        "required": [
          "chunks",
          "groups",
          "total_results",
          "has_padding"
        ],
        "title": "GroupedChunkResponse",
        "description": "Response that includes both flat results and grouped results for UI"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IngestFromConnectorRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "morphik_folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Morphik Folder Name"
          },
          "morphik_end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Morphik End User Id"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "rules": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rules"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "IngestFromConnectorRequest"
      },
      "IngestTextRequest": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "rules": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Rules"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation"
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "IngestTextRequest",
        "description": "Request model for ingesting text content"
      },
      "LogResponse": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "operation_type": {
            "type": "string",
            "title": "Operation Type"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "tokens_used": {
            "type": "integer",
            "title": "Tokens Used"
          },
          "duration_ms": {
            "type": "number",
            "title": "Duration Ms"
          },
          "app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Id"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "user_id",
          "operation_type",
          "status",
          "tokens_used",
          "duration_ms"
        ],
        "title": "LogResponse",
        "description": "Public serialisable view of a UsageRecord."
      },
      "ManualCredentialsAuthResponse": {
        "properties": {
          "auth_type": {
            "type": "string",
            "title": "Auth Type"
          },
          "required_fields": {
            "items": {
              "$ref": "#/components/schemas/CredentialField"
            },
            "type": "array",
            "title": "Required Fields"
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions"
          }
        },
        "type": "object",
        "required": [
          "auth_type",
          "required_fields"
        ],
        "title": "ManualCredentialsAuthResponse"
      },
      "ManualCredentialsRequest": {
        "properties": {
          "credentials": {
            "type": "object",
            "title": "Credentials"
          }
        },
        "type": "object",
        "required": [
          "credentials"
        ],
        "title": "ManualCredentialsRequest",
        "description": "Request model for manual credential submission."
      },
      "MetadataExtractionRuleRequest": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "metadata_extraction"
          },
          "schema": {
            "type": "object",
            "title": "Schema"
          }
        },
        "type": "object",
        "title": "MetadataExtractionRuleRequest",
        "description": "Request model for metadata extraction rule"
      },
      "ModelConfigCreate": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "config_data": {
            "type": "object",
            "title": "Config Data"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "config_data"
        ],
        "title": "ModelConfigCreate",
        "description": "Request model for creating a model configuration."
      },
      "ModelConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "config_data": {
            "type": "object",
            "title": "Config Data"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "provider",
          "config_data",
          "created_at",
          "updated_at"
        ],
        "title": "ModelConfigResponse",
        "description": "Response model for model configuration."
      },
      "ModelConfigUpdate": {
        "properties": {
          "config_data": {
            "type": "object",
            "title": "Config Data"
          }
        },
        "type": "object",
        "required": [
          "config_data"
        ],
        "title": "ModelConfigUpdate",
        "description": "Request model for updating a model configuration."
      },
      "ModelResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "config": {
            "type": "object",
            "title": "Config"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "provider",
          "config",
          "created_at",
          "updated_at"
        ],
        "title": "ModelResponse",
        "description": "Response for a saved model."
      },
      "NukeAppResponse": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "deleted"
          }
        },
        "type": "object",
        "required": [
          "app_name"
        ],
        "title": "NukeAppResponse"
      },
      "OAuthAuthResponse": {
        "properties": {
          "authorization_url": {
            "type": "string",
            "title": "Authorization Url"
          }
        },
        "type": "object",
        "required": [
          "authorization_url"
        ],
        "title": "OAuthAuthResponse"
      },
      "QueryPromptOverride": {
        "properties": {
          "prompt_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Template",
            "description": "Custom prompt template for generating responses to queries. REQUIRED PLACEHOLDERS: {question} and {context} must be included in the template. The {question} placeholder will be replaced with the user query, and {context} will be replaced with the retrieved content. Use this to control response style, format, and tone."
          }
        },
        "type": "object",
        "title": "QueryPromptOverride",
        "description": "Configuration for customizing query prompts.\n\nThis allows you to customize how responses are generated during query operations.\nQuery prompts guide the LLM on how to format and style responses, what tone to use,\nand how to incorporate retrieved information into the response.\n\nRequired placeholders:\n- {question}: Will be replaced with the user's query\n- {context}: Will be replaced with the retrieved content/context\n\nExample prompt template:\n```\nAnswer the following question based on the provided information.\n\nQuestion: {question}\n\nContext:\n{context}\n\nAnswer:\n```"
      },
      "QueryPromptOverrides": {
        "properties": {
          "entity_extraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityExtractionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity extraction prompts - controls how entities are identified in text during queries"
          },
          "entity_resolution": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntityResolutionPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for entity resolution prompts - controls how variant forms are grouped during queries"
          },
          "query": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryPromptOverride"
              },
              {
                "type": "null"
              }
            ],
            "description": "Overrides for query prompts - controls response generation style, format, and tone"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "QueryPromptOverrides",
        "description": "Container for query-related prompt overrides.\n\nUse this class when customizing prompts for query operations, which may\ninclude customizations for entity extraction, entity resolution, and\nthe query/response generation itself.\n\nThis is the most feature-complete override class, supporting all customization types.\n\nAvailable customizations:\n- entity_extraction: Customize how entities are identified in text\n- entity_resolution: Customize how entity variants are grouped\n- query: Customize response generation style, format, and tone\n\nEach type has its own required placeholders. See the specific class documentation\nfor details and examples."
      },
      "Relationship": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "source_id": {
            "type": "string",
            "title": "Source Id"
          },
          "target_id": {
            "type": "string",
            "title": "Target Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Document Ids"
          },
          "chunk_sources": {
            "additionalProperties": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Chunk Sources"
          }
        },
        "type": "object",
        "required": [
          "source_id",
          "target_id",
          "type"
        ],
        "title": "Relationship",
        "description": "Represents a relationship between entities in a knowledge graph"
      },
      "RetrieveRequest": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "k": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "K",
            "default": 4
          },
          "min_score": {
            "type": "number",
            "title": "Min Score",
            "default": 0
          },
          "use_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Reranking"
          },
          "use_colpali": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Colpali"
          },
          "padding": {
            "type": "integer",
            "minimum": 0,
            "title": "Padding",
            "description": "Number of additional chunks/pages to retrieve before and after matched chunks (ColPali only)",
            "default": 0
          },
          "graph_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Name",
            "description": "Name of the graph to use for knowledge graph-enhanced retrieval"
          },
          "hop_depth": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 3,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Hop Depth",
            "description": "Number of relationship hops to traverse in the graph",
            "default": 1
          },
          "include_paths": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Paths",
            "description": "Whether to include relationship paths in the response",
            "default": false
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation. Accepts a single folder name or a list of folder names."
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "RetrieveRequest",
        "description": "Base retrieve request model"
      },
      "SaveApiKeyRequest": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "base_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base Url"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "api_key"
        ],
        "title": "SaveApiKeyRequest",
        "description": "Request to save API keys."
      },
      "SaveModelRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "config": {
            "type": "object",
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "name",
          "provider",
          "config"
        ],
        "title": "SaveModelRequest",
        "description": "Request to save a custom model."
      },
      "SetFolderRuleRequest": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/MetadataExtractionRuleRequest"
            },
            "type": "array",
            "title": "Rules"
          }
        },
        "type": "object",
        "required": [
          "rules"
        ],
        "title": "SetFolderRuleRequest",
        "description": "Request model for setting folder rules"
      },
      "StorageFileInfo": {
        "properties": {
          "bucket": {
            "type": "string",
            "title": "Bucket"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "default": 1
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "bucket",
          "key"
        ],
        "title": "StorageFileInfo",
        "description": "Information about a file stored in storage"
      },
      "UpdateGraphRequest": {
        "properties": {
          "additional_filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Filters",
            "description": "Optional additional metadata filters to determine which new documents to include"
          },
          "additional_documents": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Documents",
            "description": "Optional list of additional document IDs to include"
          },
          "prompt_overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GraphPromptOverrides"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional customizations for entity extraction and resolution prompts"
          },
          "folder_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Name",
            "description": "Optional folder scope for the operation. Accepts a single folder name or a list of folder names."
          },
          "end_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End User Id",
            "description": "Optional end-user scope for the operation"
          }
        },
        "type": "object",
        "title": "UpdateGraphRequest",
        "description": "Request model for updating a graph"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Workflow": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "owner_id": {
            "type": "string",
            "title": "Owner Id",
            "description": "Organization / developer ID owning this workflow"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "End-user ID when created in a narrowed scope"
          },
          "app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Id",
            "description": "App ID when created inside an application context"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/ConfiguredAction"
            },
            "type": "array",
            "minItems": 1,
            "title": "Steps",
            "description": "Ordered list of actions to execute"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          }
        },
        "type": "object",
        "required": [
          "name",
          "owner_id",
          "steps"
        ],
        "title": "Workflow",
        "description": "High-level definition of a multi-step document processing workflow."
      },
      "WorkflowRun": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "workflow_id": {
            "type": "string",
            "title": "Workflow Id"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "app_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Id"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowRunStatus",
            "default": "queued"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "results_per_step": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Results Per Step"
          },
          "final_output": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Output"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "system_metadata": {
            "type": "object",
            "title": "System Metadata"
          }
        },
        "type": "object",
        "required": [
          "workflow_id",
          "document_id"
        ],
        "title": "WorkflowRun",
        "description": "Represents a concrete execution of a *Workflow* against a document."
      },
      "WorkflowRunStatus": {
        "type": "string",
        "enum": [
          "queued",
          "running",
          "completed",
          "failed"
        ],
        "title": "WorkflowRunStatus",
        "description": "Allowed status values for *WorkflowRun* objects."
      }
    }
  }
}

